<div class="flex flex-col items-center mb-45">
  <%= render "shared/hello_block"%>
  <%= render "shared/profile_tabs", page_count: 1 %>
</div>

<div class='creator-frame'>

  <%= render "shared/creator_participant_block", creator: false %>

  <div class='mt-4'>
    <div class="project-invitation">
      <div class="flex flex-row items-start mb-2">
        <span class="p-text-16">Ici s'affichent les films auxquels on vous a demandé de participer. Appuyez sur</span>
        <%= image_tag "icons/akar-icons_edit.svg", alt: "Edit Icon", style: "vertical-align: middle; margin-left: 5px; margin-right: 5px;" %>
        <span class="p-text-16">pour :</span>
      </div>

      <ul>
        <li class="p-text-16">Ajouter du contenu vidéo ou photo pour illustrer chaque chapitre.</li>
        <li class="p-text-16">Contribuer à la dédicace finale. S'il s'agit de musique, vous pouvez sélectionner la partie qui leur est accessible.</li>
        <li class="p-text-16">Inviter un ami à collaborer sur le projet (l'administrateur doit approuver le nouveau participant).</li>
      </ul>
    </div>
  </div>

  <div class="w-80 mt-65">
    <h4 class="text-black text-left font-montserrat text-[32px] font-bold leading-[24px] mb-[24px]">Les informations sur le projet en cours</h4>
  </div>
  <div class="flex flex-row items-start mt-4">
    <span class="p-text-16-bold mr-4">Nom du destinataire (pour qui nous préparons le film) :</span>
    <span class="p-text-16"><%= @destinataires&.map(&:name).join(" | ") %></span>
  </div>
  <div class="flex flex-row items-start mt-4">
    <span class="p-text-16-bold mr-4">Occasion :</span>
    <span class="p-text-16"><%= @video&.occasion&.humanize %></span>
  </div>
  <div class="flex flex-row items-start mt-4">
    <span class="p-text-16-bold mr-4">Date de livraison du film :</span>
    <span class="p-text-16"><%=@video&.end_date&.strftime("%d/%m/%Y") %></span>
  </div>

  <hr class='hr-divider-gray mt-65 '/>

  <div class="flex justify-start items-center mt-6">
    <div class="p-text-18-bold">Ajouter mon contenu dans les chapitres</div>
    <a href="<%= collaborator_manage_chapters_path(@video.id) %>" class="transparent-link ml-50" data-turbo="false">Gérer les chapitres</a>
  </div>

  <%if @collaborator_chapters.present? and @collaborator_chapters.count>0%>
    <div class="w-full flex-col justify-center items-center">
      <%= form_with url: edit_collaborator_chapters_post_path(video_id: @video.id), method: :post, html: { class: "flex flex-col justify-center items-center w-full", id: "edit_video_form", data: { turbo: false } } do |f| %>
        <div class="w-100i edit_video_form_block mt-6 flex flex-col justify-center items-center">

          <%= render "videos/shared/popup_edit_video", chapters: @collaborator_chapters, musics: @musics, video: @video, f: f, collab: true %>

          <div class="edit-video-alert w-full">
            <%= image_tag "icons/alert.svg" %>
            <p class="p-text-16">Cliquez et faites glisser pour changer l'ordre</p>
          </div>
          <div class="flex justify-center mt-65">
            <%= f.submit "Confirmer les modifications", class: "black-link" %>
          </div>
        </div>
      <% end %>
    </div>
  <%end%>
  <hr class='hr-divider-gray mt-6'/>

  <div class="flex justify-start items-center mt-6">
    <div class="p-text-18-bold">Participation à la Dédicace de fin</div>
    <%= link_to "Gérer Dédicace de fin", collaborator_manage_dedicace_path(@video.id), data: { turbo: false }, class: "transparent-link ml-50" %>
  </div>
  <%if @collaborator_dedicace.present? && @collaborator_dedicace.creator_end_dedication_video.attached?%>
    <div class="projects-grid mt-8">
      <div class="project-main-block flex flex-col justify-between">
        <div class="project-block">
          <%= video_tag @collaborator_dedicace.creator_end_dedication_video, controls: true, autobuffer: true, class: 'collaborator-dedicace-thumb' %>
        </div>
      </div>
    </div>
  <%end%>
</div>
<script>
document.addEventListener("DOMContentLoaded", () => {
  let currentAudioPlayer = null; // Track the currently playing audio player
  const radioButtons = document.querySelectorAll('input[name="video[music_type]"]');
  const wholeVideoForm = document.getElementById('whole-video-form');
  const byChaptersForm = document.getElementById('by-chapters-form');

  radioButtons.forEach(radio => {
    radio.addEventListener('change', () => {
      // Show or hide forms based on selected radio button
      if (radio.value === 'whole_video') {
        wholeVideoForm.style.display = 'block';
        byChaptersForm.style.display = 'none';
      } else {
        wholeVideoForm.style.display = 'none';
        byChaptersForm.style.display = 'block';
      }
    });
  });

  // Trigger the change event for the currently selected radio button
  const checkedRadio = document.querySelector('input[name="video[music_type]"]:checked');
  if (checkedRadio) {
    checkedRadio.dispatchEvent(new Event('change'));
  }

  document.querySelectorAll(".custom-music-dropdown").forEach((dropdown) => {
    const toggle = dropdown.querySelector(".dropdown-toggle");
    const menu = dropdown.querySelector(".dropdown-menu");
    const hiddenInput = dropdown.nextElementSibling; // Hidden input for the selected music ID

    // Toggle dropdown menu visibility
    // toggle.addEventListener("click", () => {
    //   menu.classList.toggle("visible");
    // });

    // Handle selection of a music option
    menu.querySelectorAll(".dropdown-option input[type='radio']").forEach((radioButton) => {
      const option = radioButton.closest(".dropdown-option");
      const audioSrc = option.querySelector(".custom-audio-player").dataset.audioSrc;

      // Create an audio element dynamically for playback
      let audio = new Audio(audioSrc);

      option.querySelector(".play-button").addEventListener("click", () => {
        // Initialize and resume AudioContext when a user interacts

        // Stop the currently playing audio player, if any
        if (currentAudioPlayer && currentAudioPlayer !== audio) {
          currentAudioPlayer.pause();
          currentAudioPlayer.currentTime = 0; // Reset to the beginning
        }

        // Play the new audio or toggle pause/play for the current one
        if (audio.paused) {
          audio.play();
          currentAudioPlayer = audio; // Update the current audio player
        } else {
          audio.pause();
        }
      });

      radioButton.addEventListener("change", () => {
        const musicId = option.dataset.musicId;
        console.log(musicId)
        console.log(hiddenInput)
        // Update hidden input value
        hiddenInput.value = musicId;
        console.log(hiddenInput.value)
        // Update toggle text
        const musicName = option.querySelector("span").innerText;
        toggle.querySelector("span").innerText = musicName;

        // Close dropdown
        // menu.classList.remove("visible");
      });
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener("click", (event) => {
    document.querySelectorAll(".dropdown-menu.visible").forEach((menu) => {
      if (!menu.parentElement.contains(event.target)) {
        // menu.classList.remove("visible");
      }
    });
  });

  // Stop audio when clicking outside
  document.addEventListener("click", (event) => {
    if (!event.target.closest('.dropdown-menu')) {
      if (currentAudioPlayer) {
        currentAudioPlayer.pause();
        currentAudioPlayer.currentTime = 0; // Reset the current audio
        currentAudioPlayer = null;
      }
    }
  });

  document.addEventListener("click", (event) => {
    const deleteMusicButton = event.target.closest(".delete-music-icon-btn");
    if (deleteMusicButton) {
      const parentBlock = deleteMusicButton.closest(".audio-visualizer");
      const url = deleteMusicButton.dataset.url;

      handleMusicDeletion(url, parentBlock);
    }
  });

  const handleMusicDeletion = async (url, parentBlock) => {
    try {
      if (url) {
        // Handle deletion for existing music files (server-side)
        const response = await fetch(url, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          console.error(`HTTP error! status: ${response.status}`);
          throw new Error("Server-side deletion failed.");
        }

        const data = await response.json();
        if (data.message) {
          resetMusicBlock(parentBlock);
        } else {
          console.warn("Server did not confirm deletion.");
        }
      } else {
        // Handle deletion for newly added music files
        resetMusicBlock(parentBlock);
      }
    } catch (error) {
      console.error("Error during music deletion:", error);
    } finally {
      // Optional: Reload the page to ensure state is consistent
      location.reload();
    }
  };

  const resetMusicBlock = (parentBlock) => {
    // Remove the block visually
    if (parentBlock) {
      parentBlock.remove();
    }
  };

});
</script>
<style>
.delete-music-icon-btn{
  position: absolute;
  width: 40px;
  height: 40px;
  top: 0;
  right: 0;
}
.purge-music-icon{
  position: absolute !important;
  top: 10px !important;
  right: 10px !important;
  width: 40px !important;
  height: 40px !important;
  z-index: 2 !important;
  display: block !important;
}
.audio-visualizer {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px 20px;
  border-radius: 30px; /* Rounded container */
  background: rgba(242, 252, 255, 1); /* Light blue */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.waveform-canvas {
  width: 100%;
  height: 32px;
  overflow: hidden;
}
.custom-music-dropdown {
  position: relative;
  width: 100%;
  height: 57px;
  padding: 16px 40px 16px 20px;
  border-radius: 8px;
  background: var(--Blue, rgba(242, 252, 255, 1));
  appearance: none;
  -webkit-appearance: none;
  font-family: 'Red Hat Display', sans-serif;
  font-size: 16px;
  font-weight: 400;
  line-height: 25px;
  text-align: left;
  background-clip: padding-box;
  z-index: 1;
}

.custom-music-dropdown::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 8px;
  padding: 1px; /* Border thickness */
  background: linear-gradient(
    205.68deg,
    rgba(201, 225, 255, 0.2) 19.49%,
    rgba(13, 103, 131, 0.2) 60.63%,
    rgba(22, 63, 80, 0.2) 90.92%
  );
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  z-index: -1; /* Place below the dropdown content */
}
.music-dropdown-radio{
  margin-top: 20px;
}
.dropdown-toggle {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  font-size: 16px;
  border-radius: 8px;
}

.dropdown-arrow {
  margin-left: 10px;
}

.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  max-height: 215px;
  overflow-y: auto;
  z-index: 1000;
  display: none;
}

.dropdown-menu.visible {
  display: block;
}

.dropdown-option {
  display: flex;
  align-items: center;
  padding: 10px 25px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
}

.dropdown-option:last-child {
  border-bottom: none;
}

.dropdown-option:hover {
  background: rgba(201, 225, 255, 0.5);
}
.edit-music-video-icon{
  width: 24px !important;
  height: 24px  !important;
  border: none !important;
  margin-left: 15px !important;
}
</style>