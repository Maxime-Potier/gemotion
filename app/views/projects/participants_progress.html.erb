<div class="flex flex-col items-center mb-45">
  <%= render "shared/hello_block"%>
  <%= render "shared/profile_tabs", page_count: 1 %>
</div>

<div class="creator-frame">
  <div class="flex flex-row items-center justify-between w-full">
    <div class="p-text-16"><%= @video&.end_date&.strftime("%d/%m/%Y") %></div>
    <div class='flex flex-row items-center justify-start'>

      <div data-controller="dialog" data-action="click->dialog#clickOutside">
        <button data-action="click->dialog#open" class="text-black text-decoration-underline font-bold">Modifier la date limite</button>
        <dialog data-dialog-target="modal" class="backdrop:bg-slate-400 backdrop:opacity-80 w-full lg:w-2/3 modify-time-modal">


          <%= form_with url: modify_deadline_path(id: @video.id), method: :patch, html:{class: "h-full", data: { turbo: false }} do |f| %>
            <div class="flex flex-col items-center gap-[48px] h-full pt-40 pb-40 px-[40px] rounded-[20px] border border-[#C9E1FF] bg-white shadow-custom">
              <p class="p-text-center-bold-16">Vous pouvez modifier la date limite du projet en cours</p>
              <div class="custom-calendar-container" data-controller="custom-calendar" data-custom-calendar-end-date="<%= @video.end_date %>">
                <%= hidden_field_tag 'end_date', @video.end_date, id: 'customDateField', data: { custom_calendar_target: "hiddenField" } %>
                <div id="customCalendar" class="custom-calendar" data-custom-calendar-target="calendarContainer">
                  <!-- The custom calendar will be rendered here by the controller -->
                </div>
              </div>
              <div class="flex justify-between items-center">
                <button formmethod="dialog" class="black-link">Annuler</button>
                <%= f.submit "Étape suivante", class:"transparent-link ml-2" %>
              </div>
            </div>

          <% end %>
        </dialog>
      </div>

      <div data-controller="dialog" data-action="click->dialog#clickOutside" class="h-[53px]">
        <button data-action="click->dialog#open" class="ml-15 transparent-link-smaller">Clôturer le projet</button>
        <dialog data-dialog-target="modal" class="backdrop:bg-slate-400 backdrop:opacity-80 w-full w-1063 popup-close-project-modal bg-transparent">
          <div class="text-with-image-block-close-project flex flex-col justify-center items-center mt-65 mb-[72px] px-[27px] w-full p-text-center-16">
            <p class="font-bold pt-40">Êtes-vous sûr de vouloir arrêter ce projet ?</p>

            <div class="frame-close-proj">
              <div>Invitez des amis par e-mail, lien simple, lien WhatsApp, lien Facebook Messenger.</div>
              <div class="close-proj-blue-block flex items-center justify-center">
                <span>Vous pouvez déplacer la date limite pour permettre à tous les participants de contribuer à la création du film.</span>
              </div>
            </div>

            <%= form_with url: close_project_path(id: @video.id), method: :patch, html: {class: "mb-[32px]", data: { turbo: false }} do |f| %>
              <button formmethod="dialog" class="transparent-link font-bold">Prolonger le délai</button>
              <%= f.submit "Terminer le projet et enregistrer comme brouillon", class:"black-link ml-2" %>
            <% end %>
            <%= image_tag 'icons/lamp.png', class: 'image-from-image-text-block' %>
          </div>
        </dialog>
      </div>
    </div>
  </div>

  <br>

  <div class="">
    <% if @video.completed? %>
      <div>
        <% if @video.paid %>
          <div>
            <video controls style="max-width: 100%; height: auto; border-radius: 20px;">
              <source src="<%= url_for(@video.final_video) %>" type="video/mp4">
              Votre navigateur ne prend pas en charge l'élément vidéo.
            </video>
            <div class="flex flex-row justify-center items-center mt-2">
              <a href="<%= url_for(@video.final_video) %>" class= "black-link mr-4" download>Télécharger la vidéo finale</a>
              <% if @video.completed? && @video.final_video_xml.attached? %>
                <div>
                  <a href="<%= url_for(@video.final_video_xml) %>" class= "black-link" download>Télécharger les archives MLT</a>
                </div>
              <% else %>
                <p>Aucun fichier MLT généré.</p>
              <% end %>
            </div>
            <br>
          </div>
        <% else %>
          <video controls style="max-width: 100%; height: auto; border-radius: 20px;">
            <source src="<%= url_for(@video.final_video_with_watermark) %>" type="video/mp4">
            Votre navigateur ne prend pas en charge l'élément vidéo.
          </video>
        <%end%>
      </div>
      <div class="w-full flex justify-center items-center mt-6">
        <%= button_to "Actualiser la vidéo", creator_refresh_video_path(video_id: @video.id), method: :post, class: "black-link", data: { disable_with: "Refreshing..." } %>
      </div>
    <% elsif @video.processing? %>
      <p>Votre vidéo est en cours de traitement. Cette page sera actualisée une fois prête.</p>
    <% else %>
      <div class="flex relative items-center gap-[61px]">
        <%= video_tag asset_path('about.mp4'), id: 'about-video-element', controls: false, width: 982, height: 425, poster: asset_path('gemotion-about-video-poster.svg') %>
        <div id="play-button" class="absolute inset-0 flex items-center justify-center cursor-pointer">
            <%= image_tag 'icons/about-video-play.svg', alt: 'Play Button' %>
            <%= image_tag 'icons/video-bottom.png', alt: 'Play Button Icon', class: 'absolute video-bottom-icon' %>
        </div>
      </div>
    <% end %>
  </div>

  <hr class='hr-divider-gray mt-65 '/>

  <div class="flex justify-start items-center mt-6">
    <div class="p-text-18-bold">Ajouter mon contenu dans les chapitres</div>
    <a href="<%= creator_manage_chapters_path(@video.id) %>" class="transparent-link ml-50">Gérer les chapitres</a>
  </div>

  <%if @video_chapters.present? and @video_chapters.count>0%>
    <div class="w-full flex-col justify-center items-center">
      <%= form_with url: edit_creator_chapters_post_path(video_id: @video.id), method: :post, html: { class: "flex flex-col justify-center items-center w-full", id: "edit_video_form", data: { turbo: false } } do |f| %>
        <div class="w-100i edit_video_form_block mt-6 flex flex-col justify-center items-center">

          <%= render "videos/shared/popup_edit_video", chapters: @video_chapters, musics: @musics, video: @video, f: f, collab: false %>

          <div class="flex justify-center mt-6">
            <%= f.submit "Confirmer les modifications", class: "black-link" %>
          </div>
        </div>
      <% end %>
    </div>
  <%end%>
  <hr class='hr-divider-gray mt-65 '/>

  <div class="flex justify-start items-center mt-6">
    <div class="p-text-18-bold ">Participation à la Dédicace de fin</div>
    <%= link_to "Gérer Dédicace de fin", creator_manage_dedicace_path(@video.id), data: { turbo: false }, class: "transparent-link ml-50" %>
  </div>
  <%if @video_dedicace.present? && @video_dedicace.creator_end_dedication_video.attached?%>
    <div class="projects-grid mt-8">
      <div class="project-main-block flex flex-col justify-between">
        <div class="project-block">
          <%= video_tag @video_dedicace.creator_end_dedication_video, controls: true, autobuffer: true, class: 'collaborator-dedicace-thumb' %>
        </div>
      </div>
    </div>
  <%end%>



  <hr class='hr-divider-gray mt-65 '/>
  <div class="mt-8 w-full">
    <% @participants.each do |collaboration| %>
      <div class="flex flex-col justify-center w-full">
        <div class="flex flex-row justify-start items-center">
          <p><%= collaboration.invited_user.first_name.capitalize %> <%= collaboration.invited_user.last_name.capitalize %> Progress</p>
            <%= button_to 'Supprimer un collaborateur',
              delete_collaboration_path(collaboration.id),
              method: :delete,
              class: 'ml-2 font-medium text-black text-decoration-underline',
              form: { data: { turbo: false, confirm: 'Êtes-vous sûr de vouloir supprimer ce collaborateur ?' } } %>
        </div>
          <%= form_with url: approving_collaborator_attachments_path(video_id: @video.id), method: :post, html: { data: { turbo: false } } do |f| %>

          <%= f.hidden_field "collaborator_attachment[collaboration_id]", value: collaboration.id %>

          <div id="chapters-list" class="chapters-grid mt-8">

          <%if collaboration.collaborator_dedicace.present? && collaboration.collaborator_dedicace.creator_end_dedication_video.attached?%>
            <div class="project-main-block flex flex-col justify-start items-center chapter-item">
              <div class="mb-2 p-text-16">
                Approuvée
                <%= f.check_box "collaborator_attachment[dedicace]",
                { checked: collaboration.collaborator_dedicace.approved_by_creator,
                  data: { toggle: true } },
                "true",
                "false" %>

              </div>
              <div class="project-block">
                <%= image_tag "icons/Group39948.png", alt: "Edit Icon", class: "edit-prof-video-icon" %>
                <%= video_tag collaboration.collaborator_dedicace.creator_end_dedication_video, controls: true, autobuffer: true, class: 'collaborator-dedicace-thumb' %>
              </div>
            </div>
          <%end%>
          <% collaboration.collaborator_chapters.order(:order).each do |chapter| %>
            <div class="project-main-block flex flex-col justify-start items-center chapter-item" data-id="<%= chapter.id %>">
              <div class="mb-2 p-text-16">
                Approuvée
                <%= f.check_box "collaborator_attachment[chapter][#{chapter.id}]",
                { checked: chapter.approved_by_creator,
                  data: { toggle: true } },
                "true",
                "false" %>
              </div>
              <div class="project-block">
                <div data-controller="dialog" data-action="click->dialog#clickOutside">
                  <%= image_tag "icons/Group39947.png", alt: "Edit Icon", class: "edit-prof-video-icon", data: { action: "click->dialog#open" } %>
                  <dialog data-dialog-target="modal" class="backdrop:bg-slate-400 backdrop:opacity-80 w-full lg:w-2/3 edit-chap-modal">
                    <div class="w-full h-full flex flex-col justify-start items-center">
                      <div class="video-memory">
                        <div class="video-memory-thumb-wrapper">
                          <% if chapter.chapter_type.image.attached? %>
                              <%= image_tag chapter.chapter_type.image, class: "h-[150px] w-[200px] object-cover rounded" %>
                          <% else %>
                              <p>Pas d'image</p>
                          <% end %>
                        </div>
                        <div class="w-full">
                          <div class="div-input"> <%=chapter.text%></div>
                        </div>
                        <div class="gallery flex flex-row items-center space-x-8">
                          <% chapter.ordered_videos.each do |video| %>
                            <div class="collab-video-container">
                              <%= video_tag video, controls: true, autobuffer: true %>
                            </div>
                          <% end %>
                        </div>

                        <div id="edit-photo-gallery-<%= chapter.id %>" class="gallery flex flex-row items-center space-x-8">
                          <% chapter.ordered_photos.each do |photo| %>
                            <div class="collab-video-container">
                              <%= image_tag photo.variant(resize_to_fill: [200, 200]).processed, class: "prev-image" %>
                            </div>
                          <% end %>
                        </div>

                        <%if @video.by_chapters?%>
                          <div class="music-selection w-full">
                            <% if chapter.collaborator_music.present? %>
                              <%= audio_tag chapter.collaborator_music.music.music, controls: true %>
                            <% end %>
                          </div>
                        <%end%>
                        <%= button_tag type: 'button', formmethod: 'dialog', class: 'cta w-100i h-45', data: { action: 'click->dialog#close' } do %>
                          Fermer
                        <% end %>
                      </div>
                    </div>

                  </dialog>
                </div>
                <% if chapter.chapter_type.image.attached? %>
                  <%= image_tag chapter.chapter_type.image, class: "prev-image preview-prof-img" %>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
        <br>
          <div class="flex justify-center">
            <%= f.submit "Enregistrer les approbations", class: "black-link" %>
          </div>
        <%end%>
      </div>
    <% end %>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  let currentAudioPlayer = null; // Track the currently playing audio player
  const radioButtons = document.querySelectorAll('input[name="video[music_type]"]');
  const wholeVideoForm = document.getElementById('whole-video-form');
  const byChaptersForm = document.getElementById('by-chapters-form');

  radioButtons.forEach(radio => {
    radio.addEventListener('change', () => {
      // Show or hide forms based on selected radio button
      if (radio.value === 'whole_video') {
        wholeVideoForm.style.display = 'block';
        byChaptersForm.style.display = 'none';
      } else {
        wholeVideoForm.style.display = 'none';
        byChaptersForm.style.display = 'block';
      }
    });
  });

  // Trigger the change event for the currently selected radio button
  const checkedRadio = document.querySelector('input[name="video[music_type]"]:checked');
  if (checkedRadio) {
    checkedRadio.dispatchEvent(new Event('change'));
  }

  document.querySelectorAll(".custom-music-dropdown").forEach((dropdown) => {
    const toggle = dropdown.querySelector(".dropdown-toggle");
    const menu = dropdown.querySelector(".dropdown-menu");
    const hiddenInput = dropdown.nextElementSibling; // Hidden input for the selected music ID

    // Toggle dropdown menu visibility
    // toggle.addEventListener("click", () => {
    //   menu.classList.toggle("visible");
    // });

    // Handle selection of a music option
    menu.querySelectorAll(".dropdown-option input[type='radio']").forEach((radioButton) => {
      const option = radioButton.closest(".dropdown-option");
      const audioSrc = option.querySelector(".custom-audio-player").dataset.audioSrc;

      // Create an audio element dynamically for playback
      let audio = new Audio(audioSrc);

      option.querySelector(".play-button").addEventListener("click", () => {
        // Initialize and resume AudioContext when a user interacts

        // Stop the currently playing audio player, if any
        if (currentAudioPlayer && currentAudioPlayer !== audio) {
          currentAudioPlayer.pause();
          currentAudioPlayer.currentTime = 0; // Reset to the beginning
        }

        // Play the new audio or toggle pause/play for the current one
        if (audio.paused) {
          audio.play();
          currentAudioPlayer = audio; // Update the current audio player
        } else {
          audio.pause();
        }
      });

      radioButton.addEventListener("change", () => {
        const musicId = option.dataset.musicId;
        console.log(musicId)
        console.log(hiddenInput)
        // Update hidden input value
        hiddenInput.value = musicId;
        console.log(hiddenInput.value)
        // Update toggle text
        const musicName = option.querySelector("span").innerText;
        toggle.querySelector("span").innerText = musicName;

        // Close dropdown
        // menu.classList.remove("visible");
      });
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener("click", (event) => {
    document.querySelectorAll(".dropdown-menu.visible").forEach((menu) => {
      if (!menu.parentElement.contains(event.target)) {
        // menu.classList.remove("visible");
      }
    });
  });

  // Stop audio when clicking outside
  document.addEventListener("click", (event) => {
    if (!event.target.closest('.dropdown-menu')) {
      if (currentAudioPlayer) {
        currentAudioPlayer.pause();
        currentAudioPlayer.currentTime = 0; // Reset the current audio
        currentAudioPlayer = null;
      }
    }
  });

  document.addEventListener("click", (event) => {
    const deleteMusicButton = event.target.closest(".delete-music-icon-btn");
    if (deleteMusicButton) {
      const parentBlock = deleteMusicButton.closest(".audio-visualizer");
      const url = deleteMusicButton.dataset.url;

      handleMusicDeletion(url, parentBlock);
    }
  });

  const handleMusicDeletion = async (url, parentBlock) => {
    try {
      if (url) {
        // Handle deletion for existing music files (server-side)
        const response = await fetch(url, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          console.error(`HTTP error! status: ${response.status}`);
          throw new Error("Server-side deletion failed.");
        }

        const data = await response.json();
        if (data.message) {
          resetMusicBlock(parentBlock);
        } else {
          console.warn("Server did not confirm deletion.");
        }
      } else {
        // Handle deletion for newly added music files
        resetMusicBlock(parentBlock);
      }
    } catch (error) {
      console.error("Error during music deletion:", error);
    } finally {
      // Optional: Reload the page to ensure state is consistent
      location.reload();
    }
  };

  const resetMusicBlock = (parentBlock) => {
    // Remove the block visually
    if (parentBlock) {
      parentBlock.remove();
    }
  };

});
</script>
<style>
.delete-music-icon-btn{
  position: absolute;
  width: 40px;
  height: 40px;
  top: 0;
  right: 0;
}
.purge-music-icon{
  position: absolute !important;
  top: 10px !important;
  right: 10px !important;
  width: 40px !important;
  height: 40px !important;
  z-index: 2 !important;
  display: block !important;
}
.audio-visualizer {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px 20px;
  border-radius: 30px; /* Rounded container */
  background: rgba(242, 252, 255, 1); /* Light blue */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.waveform-canvas {
  width: 100%;
  height: 32px;
  overflow: hidden;
}
.custom-music-dropdown {
  position: relative;
  width: 100%;
  height: 57px;
  padding: 16px 40px 16px 20px;
  border-radius: 8px;
  background: var(--Blue, rgba(242, 252, 255, 1));
  appearance: none;
  -webkit-appearance: none;
  font-family: 'Red Hat Display', sans-serif;
  font-size: 16px;
  font-weight: 400;
  line-height: 25px;
  text-align: left;
  background-clip: padding-box;
  z-index: 1;
}

.custom-music-dropdown::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 8px;
  padding: 1px; /* Border thickness */
  background: linear-gradient(
    205.68deg,
    rgba(201, 225, 255, 0.2) 19.49%,
    rgba(13, 103, 131, 0.2) 60.63%,
    rgba(22, 63, 80, 0.2) 90.92%
  );
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  z-index: -1; /* Place below the dropdown content */
}
.music-dropdown-radio{
  margin-top: 20px;
}
.dropdown-toggle {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  font-size: 16px;
  border-radius: 8px;
}

.dropdown-arrow {
  margin-left: 10px;
}

.dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 8px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  max-height: 215px;
  overflow-y: auto;
  z-index: 1000;
  display: none;
}

.dropdown-menu.visible {
  display: block;
}

.dropdown-option {
  display: flex;
  align-items: center;
  padding: 10px 25px;
  cursor: pointer;
  border-bottom: 1px solid #eee;
}

.dropdown-option:last-child {
  border-bottom: none;
}

.dropdown-option:hover {
  background: rgba(201, 225, 255, 0.5);
}
.edit-music-video-icon{
  width: 24px !important;
  height: 24px  !important;
  border: none !important;
  margin-left: 15px !important;
}
</style>