<div class="flex flex-col items-center mb-45">
  <%= render "shared/hello_block"%>
  <%= render "shared/profile_tabs", page_count: 1 %>
</div>

<div class="creator-frame">
  <div class="flex flex-row items-center justify-between w-full">
    <div class="p-text-16"><%= @video&.end_date&.strftime("%d/%m/%Y") %></div>
    <div class='flex flex-row items-center justify-start'>

      <div data-controller="dialog" data-action="click->dialog#clickOutside">
        <button data-action="click->dialog#open" class="text-black text-decoration-underline font-bold">Modifier la date limite</button>
        <dialog data-dialog-target="modal" class="backdrop:bg-slate-400 backdrop:opacity-80 w-full lg:w-2/3 modify-time-modal">


          <%= form_with url: modify_deadline_path(id: @video.id), method: :patch, html:{class: "h-full"} do |f| %>
            <div class="flex flex-col items-center gap-[48px] h-full pt-40 pb-40 px-[40px] rounded-[20px] border border-[#C9E1FF] bg-white shadow-custom">
              <p class="p-text-center-bold-16">Vous pouvez modifier la date limite du projet en cours</p>
              <div class="custom-calendar-container" data-controller="custom-calendar" data-custom-calendar-end-date="<%= @video.end_date %>">
                <%= hidden_field_tag 'end_date', @video.end_date, id: 'customDateField', data: { custom_calendar_target: "hiddenField" } %>
                <div id="customCalendar" class="custom-calendar" data-custom-calendar-target="calendarContainer">
                  <!-- The custom calendar will be rendered here by the controller -->
                </div>
              </div>
              <div class="flex justify-between items-center">
                <button formmethod="dialog" class="black-link">Annuler</button>
                <%= f.submit "Étape suivante", class:"transparent-link ml-2" %>
              </div>
            </div>

          <% end %>
        </dialog>
      </div>

      <div data-controller="dialog" data-action="click->dialog#clickOutside" class="h-[53px]">
        <button data-action="click->dialog#open" class="ml-15 transparent-link-smaller">Clôturer le projet</button>
        <dialog data-dialog-target="modal" class="backdrop:bg-slate-400 backdrop:opacity-80 w-full w-1063 popup-close-project-modal bg-transparent">
          <div class="text-with-image-block-close-project flex flex-col justify-center items-center mt-65 mb-[72px] px-[27px] w-full p-text-center-16">
            <p class="font-bold pt-40">Êtes-vous sûr de vouloir arrêter ce projet ?</p>

            <div class="frame-close-proj">
              <div>Invitez des amis par e-mail, lien simple, lien WhatsApp, lien Facebook Messenger.</div>
              <div class="close-proj-blue-block flex items-center justify-center">
                <span>Vous pouvez déplacer la date limite pour permettre à tous les participants de contribuer à la création du film.</span>
              </div>
            </div>

            <%= form_with url: close_project_path(id: @video.id), method: :patch, html: {class: "mb-[32px]"} do |f| %>
              <button formmethod="dialog" class="transparent-link font-bold">Prolonger le délai</button>
              <%= f.submit "Terminer le projet et enregistrer comme brouillon", class:"black-link ml-2" %>
            <% end %>
            <%= image_tag 'icons/lamp.png', class: 'image-from-image-text-block' %>
          </div>
        </dialog>
      </div>
    </div>
  </div>

  <br>

  <div class="">
    <% if @video.completed? %>
      <div>
        <% if @video.paid %>
          <div>
            <video controls style="max-width: 100%; height: auto; border-radius: 20px;">
              <source src="<%= url_for(@video.final_video) %>" type="video/mp4">
              Votre navigateur ne prend pas en charge l'élément vidéo.
            </video>
            <div class="flex flex-row justify-center items-center mt-2">
              <a href="<%= url_for(@video.final_video) %>" class= "cta mr-4" download>Télécharger la vidéo finale</a>
              <% if @video.completed? && @video.final_video_xml.attached? %>
                <div>
                  <a href="<%= url_for(@video.final_video_xml) %>" class= "cta" download>Télécharger les archives MLT</a>
                </div>
              <% else %>
                <p>Aucun fichier MLT généré.</p>
              <% end %>
            </div>
            <br>
          </div>
        <% else %>
          <video controls style="max-width: 100%; height: auto; border-radius: 20px;">
            <source src="<%= url_for(@video.final_video_with_watermark) %>" type="video/mp4">
            Votre navigateur ne prend pas en charge l'élément vidéo.
          </video>
        <%end%>
      </div>
      <div class="w-full flex justify-center items-center mt-6">
        <%= button_to "Actualiser la vidéo", creator_refresh_video_path(video_id: @video.id), method: :post, class: "cta", data: { disable_with: "Refreshing..." } %>
      </div>
    <% elsif @video.processing? %>
      <p>Votre vidéo est en cours de traitement. Cette page sera actualisée une fois prête.</p>
    <% else %>
      <div class="flex relative items-center gap-[61px]">
        <%= video_tag asset_path('about.mp4'), id: 'about-video-element', controls: false, width: 982, height: 425, poster: asset_path('gemotion-about-video-poster.svg') %>
        <div id="play-button" class="absolute inset-0 flex items-center justify-center cursor-pointer">
            <%= image_tag 'icons/about-video-play.svg', alt: 'Play Button' %>
            <%= image_tag 'icons/video-bottom.png', alt: 'Play Button Icon', class: 'absolute video-bottom-icon' %>
        </div>
      </div>
    <% end %>
  </div>

  <hr class='hr-divider-gray mt-65 '/>

  <div class="flex justify-start items-center mt-6">
    <div class="font-bold">Ajouter mon contenu dans les chapitres</div>
    <a href="<%= creator_manage_chapters_path(@video.id) %>" class="cta-transparent ml-50">Gérer les chapitres</a>
  </div>

  <%if @video_chapters.present? and @video_chapters.count>0%>
    <div class="w-full flex-col justify-center items-center">
      <%= form_with url: edit_creator_chapters_post_path(video_id: @video.id), method: :post, html: { class: "flex flex-col justify-center items-center w-full", id: "edit_video_form", data: { turbo: false } } do |f| %>
        <div class="w-100i edit_video_form_block mt-6 flex flex-col justify-center items-center">
          <div id="chapters-list" class="chapters-grid mt-8">
            <% @video_chapters.each do |chapter| %>
              <div class="project-main-block flex flex-col justify-between items-center chapter-item" data-id="<%= chapter.id %>">
                <div class="project-block">

                  <div class="delete-chap-icon-btn" data-url="<%= delete_creator_chapter_path(chapter.id) %>" data-confirm="Are you sure you want to delete this chapter?">
                    <%= image_tag "icons/delete_icon.png", alt: "Delete Icon", class: "delete-chap-icon" %>
                  </div>
                  <div data-controller="dialog" data-action="click->dialog#clickOutside">
                    <%= image_tag "icons/tdesign_more.png", alt: "Edit Icon", class: "edit-prof-video-icon", data: { action: "click->dialog#open" } %>
                    <dialog data-dialog-target="modal" class="backdrop:bg-slate-400 backdrop:opacity-80 w-full lg:w-2/3 edit-chap-modal">
                      <div class="w-full h-full flex flex-col justify-start items-center">
                        <div class="video-memory">
                          <div class="video-memory-thumb-wrapper">
                            <% if chapter.chapter_type.image.attached? %>
                                <%= image_tag chapter.chapter_type.image, class: "h-[150px] w-[200px] object-cover rounded" %>
                            <% else %>
                                <p>Pas d'image</p>
                            <% end %>
                          </div>
                          <div class="w-full">
                            <%= f.text_field "chapters[#{chapter.id}][text]", value: chapter.text , placeholder: "Quel texte doit contenir ce chapitre ...", class: "w-full br-10" %>
                          </div>
                          <div id="edit-video-gallery-<%= chapter.id %>" class="gallery flex flex-row items-center space-x-8">
                            <% chapter.ordered_videos.each do |video| %>
                              <div class="edit-video-container old-video-container" data-file-name="<%= video.filename.to_s %>">
                                <%= video_tag video, controls: true, autobuffer: true %>
                                <div class="purge-attachment-icon-btn" data-url="<%= purge_chapter_attachment_path(video.id) %>">
                                  <%= image_tag "icons/delete_icon.png", alt: "Delete Icon", class: "purge-chap-icon" %>
                                </div>
                              </div>
                            <% end %>
                          </div>
                          <%= f.hidden_field "chapters[#{chapter.id}][videos_order]", id: "videos_order_#{chapter.id}" %>

                          <div class="upload-attachment-block flex flex-col justify-center items-center">
                            <span class="text-center">Faites glisser ou appuyez pour ajouter vos vidéos</span>
                            <div class="upload-attachment-circle mt-2 customUploadButtonVideosDetails" data-chapter-id="<%= chapter.id %>">
                              <span class="plus-sign">+</span>
                            </div>
                            <%= f.file_field "chapters[#{chapter.id}][videos]",
                                            multiple: true,
                                            accept: 'video/*',
                                            class: 'form-control',
                                            style: 'display: none;',
                                            id: "fileUploadInputVideos_#{chapter.id}" %>
                          </div>

                          <div id="edit-photo-gallery-<%= chapter.id %>" class="gallery flex flex-row items-center space-x-8">
                            <% chapter.ordered_photos.each do |photo| %>
                              <div class="edit-image-container old-image-container" data-file-name="<%= photo.filename.to_s %>">
                                <%= image_tag photo.variant(resize_to_fill: [200, 200]).processed, class: "prev-image" %>
                                <div class="purge-attachment-icon-btn" data-url="<%= purge_chapter_attachment_path(photo.id) %>">
                                  <%= image_tag "icons/delete_icon.png", alt: "Delete Icon", class: "purge-chap-icon" %>
                                </div>
                              </div>
                            <% end %>
                          </div>

                          <%= f.hidden_field "chapters[#{chapter.id}][photos_order]", id: "images_order_#{chapter.id}" %>

                          <div class="upload-attachment-block flex flex-col justify-center items-center">
                            <span class="text-center">Faites glisser ou appuyez pour ajouter vos photos</span>
                            <div class="upload-attachment-circle mt-2 customUploadButtonPhotosDetails" data-chapter-id="<%= chapter.id %>">
                              <span class="plus-sign">+</span>
                            </div>
                            <%= f.file_field "chapters[#{chapter.id}][photos]",
                                            multiple: true,
                                            accept: 'image/*',
                                            class: 'form-control',
                                            style: 'display: none;',
                                            id: "fileUploadInputPhotos_#{chapter.id}" %>
                          </div>

                          <%if @video.by_chapters?%>
                            <div class="music-selection w-full">
                              <% selected_music_id = chapter.video_music&.music_id %>
                              <%= f.select "chapters[#{chapter.id}][music_id]", @musics.map { |music| [music.name, music.id] }, { include_blank: 'Sélectionnez une musique', selected: selected_music_id }, { class: 'music-select w-full br-10' } %>
                            </div>
                          <%end%>
                          <%= button_tag type: 'button', formmethod: 'dialog', class: 'cta w-100i h-45', data: { action: 'click->dialog#close' } do %>
                            Fermer
                          <% end %>
                        </div>
                      </div>

                    </dialog>
                  </div>

                  <% if chapter.chapter_type.image.attached? %>
                    <%= image_tag chapter.chapter_type.image, class: "prev-image preview-prof-img" %>
                  <% end %>

                </div>

              </div>
            <% end %>

          </div>
          <input type="hidden" name="chapter_order" id="chapter_order" />
          <div class="flex justify-center mt-6">
            <%= f.submit "Confirmer les modifications", class: "cta" %>
          </div>
        </div>
      <% end %>
    </div>
  <%end%>
  <hr class='hr-divider-gray mt-65 '/>

  <div class="flex justify-start items-center mt-6">
    <div class="font-bold ">Participation à la Dédicace de fin</div>
    <%= link_to "Gérer Dédicace de fin", creator_manage_dedicace_path(@video.id), data: { turbo: false }, class: "cta-transparent ml-50" %>
  </div>
  <%if @video_dedicace.present? && @video_dedicace.creator_end_dedication_video.attached?%>
    <div class="projects-grid mt-8">
      <div class="project-main-block flex flex-col justify-between">
        <div class="project-block">
          <%= video_tag @video_dedicace.creator_end_dedication_video, controls: true, autobuffer: true, class: 'collaborator-dedicace-thumb' %>
        </div>
      </div>
    </div>
  <%end%>



  <hr class='hr-divider-gray mt-65 '/>
  <div class="mt-8 w-full">
    <% @participants.each do |collaboration| %>
      <div class="flex flex-col justify-center w-full">
        <div class="flex flex-row justify-start items-center">
          <p><%= collaboration.invited_user.first_name.capitalize %> <%= collaboration.invited_user.last_name.capitalize %> Progress</p>
            <%= button_to 'Supprimer un collaborateur',
              delete_collaboration_path(collaboration.id),
              method: :delete,
              class: 'ml-2 font-medium text-black text-decoration-underline',
              form: { data: { turbo_confirm: 'Êtes-vous sûr de vouloir supprimer ce collaborateur ?' } } %>
        </div>
          <%= form_with url: approving_collaborator_attachments_path(video_id: @video.id), method: :post, html: { data: { turbo: false } } do |f| %>

          <%= f.hidden_field "collaborator_attachment[collaboration_id]", value: collaboration.id %>

          <div id="chapters-list" class="chapters-grid mt-8">

          <%if collaboration.collaborator_dedicace.present? && collaboration.collaborator_dedicace.creator_end_dedication_video.attached?%>
            <div class="project-main-block flex flex-col justify-start items-center chapter-item">
              <div class="mb-2 p-text-16">
                Approuvée
                <%= f.check_box "collaborator_attachment[dedicace]",
                { checked: collaboration.collaborator_dedicace.approved_by_creator,
                  data: { toggle: true } },
                "true",
                "false" %>

              </div>
              <div class="project-block">
                <%= image_tag "icons/Group39948.png", alt: "Edit Icon", class: "edit-prof-video-icon" %>
                <%= video_tag collaboration.collaborator_dedicace.creator_end_dedication_video, controls: true, autobuffer: true, class: 'collaborator-dedicace-thumb' %>
              </div>
            </div>
          <%end%>
          <% collaboration.collaborator_chapters.order(:order).each do |chapter| %>
            <div class="project-main-block flex flex-col justify-start items-center chapter-item" data-id="<%= chapter.id %>">
              <div class="mb-2 p-text-16">
                Approuvée
                <%= f.check_box "collaborator_attachment[chapter][#{chapter.id}]",
                { checked: chapter.approved_by_creator,
                  data: { toggle: true } },
                "true",
                "false" %>
              </div>
              <div class="project-block">
                <div data-controller="dialog" data-action="click->dialog#clickOutside">
                  <%= image_tag "icons/Group39947.png", alt: "Edit Icon", class: "edit-prof-video-icon", data: { action: "click->dialog#open" } %>
                  <dialog data-dialog-target="modal" class="backdrop:bg-slate-400 backdrop:opacity-80 w-full lg:w-2/3 edit-chap-modal">
                    <div class="w-full h-full flex flex-col justify-start items-center">
                      <div class="video-memory">
                        <div class="video-memory-thumb-wrapper">
                          <% if chapter.chapter_type.image.attached? %>
                              <%= image_tag chapter.chapter_type.image, class: "h-[150px] w-[200px] object-cover rounded" %>
                          <% else %>
                              <p>Pas d'image</p>
                          <% end %>
                        </div>
                        <div class="w-full">
                          <div class="div-input"> <%=chapter.text%></div>
                        </div>
                        <div class="gallery flex flex-row items-center space-x-8">
                          <% chapter.ordered_videos.each do |video| %>
                            <div class="collab-video-container">
                              <%= video_tag video, controls: true, autobuffer: true %>
                            </div>
                          <% end %>
                        </div>

                        <div id="edit-photo-gallery-<%= chapter.id %>" class="gallery flex flex-row items-center space-x-8">
                          <% chapter.ordered_photos.each do |photo| %>
                            <div class="collab-video-container">
                              <%= image_tag photo.variant(resize_to_fill: [200, 200]).processed, class: "prev-image" %>
                            </div>
                          <% end %>
                        </div>

                        <%if @video.by_chapters?%>
                          <div class="music-selection w-full">
                            <% if chapter.collaborator_music.present? %>
                              <%= audio_tag chapter.collaborator_music.music.music, controls: true %>
                            <% end %>
                          </div>
                        <%end%>
                        <%= button_tag type: 'button', formmethod: 'dialog', class: 'cta w-100i h-45', data: { action: 'click->dialog#close' } do %>
                          Fermer
                        <% end %>
                      </div>
                    </div>

                  </dialog>
                </div>
                <% if chapter.chapter_type.image.attached? %>
                  <%= image_tag chapter.chapter_type.image, class: "prev-image preview-prof-img" %>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
        <br>
          <div class="flex justify-center">
            <%= f.submit "Enregistrer les approbations", class: "cta" %>
          </div>
        <%end%>
      </div>
    <% end %>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function () {

  initializeSortableForAll();

  document.querySelectorAll(".customUploadButtonVideosDetails").forEach((button) => {
    button.addEventListener("click", (event) => {
      const chapterId = button.dataset.chapterId;
      const fileInput = document.getElementById(`fileUploadInputVideos_${chapterId}`);
      if (fileInput) {
        console.log(`Uploading videos for chapter ${chapterId}`);
        fileInput.click();
      }
    });
  });

  document.querySelectorAll(".customUploadButtonPhotosDetails").forEach((button) => {
    button.addEventListener("click", (event) => {
      const chapterId = button.dataset.chapterId;
      const fileInput = document.getElementById(`fileUploadInputPhotos_${chapterId}`);
      if (fileInput) {
        console.log(`Uploading photos for chapter ${chapterId}`);
        fileInput.click();
      }
    });
  });

  document.querySelectorAll("input[id^='fileUploadInputVideos_']").forEach((fileInput) => {
    fileInput.addEventListener("change", (event) => {
      const chapterId = fileInput.id.split("_").pop(); // Extract chapter ID from input ID
      const videoGallery = document.getElementById(`edit-video-gallery-${chapterId}`);
      const videosOrderInput = document.getElementById(`videos_order_${chapterId}`);
      const customUploadButton = document.querySelector(
        `.customUploadButtonVideosDetails[data-chapter-id="${chapterId}"]`
      );

      // Replace existing video containers with new uploaded files
      videoGallery.innerHTML = "";
      Array.from(event.target.files).forEach((file) => {
        addVideoContainer(videoGallery, file, event.target);
      });

      // Update order and reinitialize Sortable
      updateOrder(videoGallery, videosOrderInput);
      initializeSortableForGallery(videoGallery, videosOrderInput);

      const fileName = event.target.files[0]?.name;
      if (fileName) {
        customUploadButton.querySelector(".plus-sign").textContent = "✔";
      }
    });
  });

  // Add change event listeners to all photo input fields
  document.querySelectorAll("input[id^='fileUploadInputPhotos_']").forEach((fileInput) => {
    fileInput.addEventListener("change", (event) => {
      const chapterId = fileInput.id.split("_").pop(); // Extract chapter ID from input ID
      const photoGallery = document.getElementById(`edit-photo-gallery-${chapterId}`);
      const photosOrderInput = document.getElementById(`images_order_${chapterId}`);
      const customUploadButton = document.querySelector(
        `.customUploadButtonPhotosDetails[data-chapter-id="${chapterId}"]`
      );

      // Replace existing photo containers with new uploaded files
      photoGallery.innerHTML = "";
      Array.from(event.target.files).forEach((file) => {
        addPhotoContainer(photoGallery, file, event.target);
      });

      // Update order and reinitialize Sortable
      updateOrder(photoGallery, photosOrderInput);
      initializeSortableForGallery(photoGallery, photosOrderInput);

      const fileName = event.target.files[0]?.name;
      if (fileName) {
        customUploadButton.querySelector(".plus-sign").textContent = "✔";
      }
    });
  });

  // Initialize Sortable for all galleries
  function initializeSortableForAll() {
    const chaptersList = document.getElementById("chapters-list");
    const chapterOrderInput = document.getElementById("chapter_order");

    if (chaptersList) {
      new Sortable(chaptersList, {
        animation: 150,
        onEnd: function () {
          // Update the order of chapter IDs
          const order = Array.from(chaptersList.children).map((item) =>
            item.getAttribute("data-id")
          );
          chapterOrderInput.value = order.join(",");
        },
      });
      Array.from(chaptersList.children).forEach((chapterItem) => {
        const chapterId = chapterItem.getAttribute("data-id");
        const videoGallery = document.getElementById(`edit-video-gallery-${chapterId}`);
        const photoGallery = document.getElementById(`edit-photo-gallery-${chapterId}`);
        const videosOrderInput = document.getElementById(`videos_order_${chapterId}`);
        const photosOrderInput = document.getElementById(`images_order_${chapterId}`);

        initializeSortableForGallery(videoGallery, videosOrderInput);
        initializeSortableForGallery(photoGallery, photosOrderInput);
      });
    }
  }


  // Helper function to initialize Sortable for a gallery
  function initializeSortableForGallery(gallery, orderInput) {
    if (gallery) {
      new Sortable(gallery, {
        animation: 150,
        onEnd: () => updateOrder(gallery, orderInput),
      });
    }
  }

  // Handle delete chapter button click
  document.addEventListener("click", (event) => {
    const deleteButton = event.target.closest(".delete-chap-icon-btn");
    if (deleteButton) {
      const url = deleteButton.dataset.url;
      const confirmation = deleteButton.dataset.confirm;

      if (confirm(confirmation)) {
        fetch(url, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.message) {
              window.location.reload();
            } else {
              alert("Failed to delete the chapter. Please try again.");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("An error occurred. Please try again.");
          });
      }
    }

    // Handle attachment purge button click (for photos and videos)
    const purgeButton = event.target.closest(".purge-attachment-icon-btn");
    const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
    if (purgeButton) {
      const url = purgeButton.dataset.url;
      const confirmation = "Are you sure you want to delete this attachment?";

      if (confirm(confirmation)) {
        fetch(url, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            "Accept": "application/json",
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.message) {
              // Remove the attachment container from the DOM
              purgeButton.closest(".edit-image-container, .edit-video-container").remove();
            } else {
              alert("Failed to delete the attachment. Please try again.");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("An error occurred. Please try again.");
          });
      }
    }
  });

    // Helper function to update order input
  function updateOrder(gallery, orderInput) {
    const order = Array.from(gallery.children).map((item) =>
      item.getAttribute("data-file-name")
    );
    orderInput.value = order.join(",");
  }

  function updateFileInput(inputElement, fileList) {
    const dataTransfer = new DataTransfer();
    console.log("updateFileInput")
    fileList.forEach((file) => {
      dataTransfer.items.add(file);
    });

    inputElement.files = dataTransfer.files;
  }

  let uploadedVideos = [];
  let uploadedPhotos = [];

  // Helper function to add video container
  function addVideoContainer(gallery, file, inputElement) {
    const fileName = file.name;
    uploadedVideos.push(file);

    const videoContainer = document.createElement("div");
    videoContainer.classList.add("edit-video-container", "new-video-container");
    videoContainer.setAttribute("data-file-name", fileName);

    const videoPreview = document.createElement("video");
    videoPreview.controls = true;
    videoPreview.src = URL.createObjectURL(file);

    const deleteButton = document.createElement("div");
    deleteButton.classList.add("purge-attachment-icon");
    deleteButton.innerHTML = `<img src="<%= asset_path('icons/delete_icon.png') %>" alt="Delete Icon" class="purge-chap-icon">`;
    deleteButton.addEventListener("click", () => {
      console.log("sdfsdfds")

      uploadedVideos = uploadedVideos.filter((item) => item.name !== fileName);
      updateFileInput(inputElement, uploadedVideos);

      updateOrder(gallery, gallery.closest(".chapter-item").querySelector(`[id^='videos_order_']`));
      videoContainer.remove();

    });

    videoContainer.appendChild(videoPreview);
    videoContainer.appendChild(deleteButton);
    gallery.appendChild(videoContainer);
  }

  // Helper function to add photo container
  function addPhotoContainer(gallery, file, inputElement) {
    const fileName = file.name;
    uploadedPhotos.push(file);

    const photoContainer = document.createElement("div");
    photoContainer.classList.add("edit-image-container", "new-image-container");
    photoContainer.setAttribute("data-file-name", fileName);

    const photoPreview = document.createElement("img");
    photoPreview.classList.add("prev-image");
    photoPreview.src = URL.createObjectURL(file);

    const deleteButton = document.createElement("div");
    deleteButton.classList.add("purge-attachment-icon");
    deleteButton.innerHTML = `<img src="<%= asset_path('icons/delete_icon.png') %>" alt="Delete Icon" class="purge-chap-icon">`;
    deleteButton.addEventListener("click", () => {
      photoContainer.remove();

      uploadedPhotos = uploadedPhotos.filter((item) => item.name !== fileName);
      updateFileInput(inputElement, uploadedPhotos);

      updateOrder(gallery, gallery.closest(".chapter-item").querySelector(`[id^='images_order_']`));
    });

    photoContainer.appendChild(photoPreview);
    photoContainer.appendChild(deleteButton);
    gallery.appendChild(photoContainer);
  }


  const video = document.getElementById('video-player');
  const playPauseButton = document.getElementById('play-pause');
  if(playPauseButton){
    playPauseButton.addEventListener('click', () => {
      if (video.paused) {
        video.play();
        playPauseButton.textContent = 'Pause';
        playPauseButton.classList.remove('with-play-icon');
        playPauseButton.classList.add('with-stop-icon');
      } else {
        video.pause();
        playPauseButton.textContent = 'Play';
        playPauseButton.classList.remove('with-stop-icon');
        playPauseButton.classList.add('with-play-icon');
      }
    });
  }

  const videoId = "<%= @video.id %>";

  // Check the initial status of the video
  fetch(`/videos/${videoId}/concat_status`)
    .then(response => response.json())
    .then(data => {
      console.log(data);

      // Only start polling if the video is processing
      if (data.concat_status !== "completed") {
        const intervalId = setInterval(() => {
          checkStatus(intervalId); // Pass the interval ID to clear it later
        }, 10000); // Poll every 10 seconds
      }
    });

  function checkStatus(intervalId) {
    fetch(`/videos/${videoId}/concat_status`)
      .then(response => response.json())
      .then(data => {
        console.log(data);
        if (data.concat_status === "completed") {
          clearInterval(intervalId); // Stop polling
          window.location.reload(); // Reloads the page to show the final video
        }
      })
      .catch(error => {
        console.error("Error checking status:", error);
      });
  }
});
</script>
