<div class="flex flex-col items-center mb-45">
  <h1 class="video-h1 pb-40">Ajoutez votre partie vidéo à  la dédicace finale</h1>
  <%= render "shared/profile_tabs", page_count: 1 %>
</div>

<div class=''>
  <%= form_with url: creator_dedicace_de_fin_post_path(video_id: @video.id), method: :post, multipart: true, html: {data: { turbo: false }} do |f| %>
    <div class="frame-no-border">
      <div class="dedications">
        <% @dedicaces.each do |dedicace| %>
          <div class="dedication">
            <%= f.radio_button "video_dedicace", dedicace.id, {checked: dedicace == @video_dedicace&.dedicace}%>
            <div class="dedication-wrapper">
              <div class="dedication-thumb-wrapper">
                <% if dedicace.video.attached? %>
                  <div class="video-wrapper">
                    <%= video_tag dedicace.video, controls: false, class: "video-content h-[150px] w-[150px] br-10" %>
                    <div class="play-icon">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none">
                        <defs>
                          <linearGradient id="play-icon-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
                            <stop offset="0%" stop-color="#163F50" />
                            <stop offset="50%" stop-color="#0D6783" />
                            <stop offset="100%" stop-color="#C9E1FF" />
                          </linearGradient>
                        </defs>
                        <path d="M8 5v14l11-7z" fill="url(#play-icon-gradient)" />
                      </svg>
                    </div>
                  </div>
                <% else %>
                  <p>Pas de vidéo</p>
                <% end %>
                <span class="dedication-name"><%= dedicace.name %></span>
              </div>
              <p class="p-text-16 mt-4"><%= dedicace.description %></p>
              <p class="p-text-16-bold mt-2 text-decoration-underline">Lire plus</p>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <div class="flex flex-col justify-start items-center mt-65">
      <div class="dedicace-de-fin-frame mt-6 flex flex-col  justify-start items-start">
        <div class="flex justify-start items-center">
          <div class="mr-2 p-text-16">Vos médias</div>
          <div class="flex justify-start items-center p-text-16">
            <%= image_tag 'icons/mingcute_time-line.png', alt: 'Time Icon', class: 'inline-block ml-15 mr-2', style: 'height: 24px; width: 24px;' %>
              <% if @video_dedicace.present? && @video_dedicace.creator_end_dedication_video.attached? %>
                <%= @video_dedicace.video_duration%>
            <% else %>
              Duration: N/A
            <% end %>
          </div>
        </div>

        <div class="flex justify-start items-center mt-2">
          <div class="mr-2 font-bold p-text-bold-16">Thème:</div>
          <div class="flex justify-start items-center p-text-16">
            <%=@dedicace.name%>
          </div>
        </div>
        <div class = "w-full flex justify-center items-center">
          <div class="video-recording-block flex justify-center items-center">
            <%if @video_dedicace.present? && @video_dedicace.creator_end_dedication_video.attached?%>
              <%= video_tag @video_dedicace.creator_end_dedication_video, controls: true, autobuffer: true, style: "width: 100%; height:100%; border-radius:15px;", id: "videoUploaded" %>
            <%end%>
            <span id="videoPreviewText" style="<%=@video_dedicace.present? && @video_dedicace.creator_end_dedication_video.attached? ? 'display: none;' : ''%>" class="p-text-16">La vue depuis la caméra frontale s'ouvre ici</span>
            <%= image_tag 'f7_person-alt.png', class: "#{@video_dedicace.present? && @video_dedicace.creator_end_dedication_video.attached? ? 'd-none' : ''} video-recording-block-img", id: 'videoPreviewImg' %>
            <video id="videoPreview" controls style="display: none;width: 100%; height:100%; border-radius:15px;"></video>
          </div>

        </div>
        <div class="flex justify-center items-center mt-4 w-full">
          <button type="button" id="startRecording" class="record-transparent w-370i">
            <%= image_tag "icons/fluent_record-24-regular.png", alt: "Download Icon", class: "inline-block", style: "height: 16px; width: 16px;" %>
            Commencer l'enregistrement vidéo
          </button>

          <button type="button" id="stopRecording" class="record-transparent w-370i" style="display: none;">
            <%= image_tag "icons/fluent_record-24-regular.png", alt: "Download Icon", class: "inline-block", style: "height: 16px; width: 16px;" %>
            Arrêter l'enregistrement vidéo
          </button>
        </div>
        <input type="file" id="recordedVideoFile" name="creator_end_dedication_video" style="display: none;" />

        <div class="upload-video-block flex flex-col justify-center items-center">
          <span class="p-text-center-16">Faites glisser ou appuyez pour ajouter vos médias</span>
          <div class="upload-circle mt-2" id="customUploadButton">
            <span class="plus-sign">+</span>
          </div>
          <%= f.file_field "creator_end_dedication_video_uploaded", accept: 'video/*', class: 'form-control', style: 'display: none;', id: 'fileUploadInput' %>
        </div>
      </div>
      <%= f.submit "Sauvegarder les modification", class: "black-link mt-6" %>
    </div>
  <% end %>
</div>




<script>
document.addEventListener("DOMContentLoaded", () => {
  const startButton = document.getElementById("startRecording");
  const stopButton = document.getElementById("stopRecording");
  const videoPreview = document.getElementById("videoPreview");
  const videoPreviewText = document.getElementById("videoPreviewText");
  const videoPreviewImg = document.getElementById("videoPreviewImg");
  const videoUploaded = document.getElementById("videoUploaded");
  const recordedVideoFile = document.getElementById("recordedVideoFile");

  const customUploadButton = document.getElementById("customUploadButton");
  const fileUploadInput = document.getElementById("fileUploadInput");

  customUploadButton.addEventListener("click", () => {
    fileUploadInput.click();
  });

  fileUploadInput.addEventListener("change", (event) => {
    const fileName = event.target.files[0]?.name;
    if (fileName) {
      customUploadButton.querySelector(".plus-sign").textContent = "✔";
    }
  });

  let mediaRecorder;
  let recordedChunks = [];

  startButton.addEventListener("click", async () => {
    recordedChunks = [];
    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    videoPreview.srcObject = stream;
    videoPreview.muted = true;
    videoPreviewText.style.display = "none";
    videoPreviewImg.style.display = "none";
    if(videoUploaded){
      videoUploaded.style.display = "none";
    }
    videoPreview.style.display = "block";
    videoPreview.play();

    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        recordedChunks.push(event.data);
      }
    };
    mediaRecorder.onstop = () => {
      const recordedBlob = new Blob(recordedChunks, { type: "video/webm" });

      // Use a FileReader to re-encode the Blob, ensuring proper metadata
      const fileReader = new FileReader();
      fileReader.onload = () => {
        const arrayBuffer = fileReader.result;
        const file = new File([arrayBuffer], "recorded_video.webm", { type: "video/webm" });
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        recordedVideoFile.files = dataTransfer.files;

        videoPreview.srcObject = null;
        stream.getTracks().forEach((track) => track.stop());
      };

      fileReader.readAsArrayBuffer(recordedBlob);
    };



    mediaRecorder.start();
    startButton.style.display = "none";
    stopButton.style.display = "block";
  });

  stopButton.addEventListener("click", () => {
    mediaRecorder.stop();
    stopButton.style.display = "none";
    startButton.style.display = "block";
  });

  document.querySelectorAll(".video-wrapper").forEach((wrapper) => {
    const video = wrapper.querySelector(".video-content");
    const playIcon = wrapper.querySelector(".play-icon");

    const togglePlayPause = () => {
      if (video.paused) {
        video.play();

        // Change to Pause Icon
        playIcon.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none">
            <rect x="6" y="5" width="4" height="14" fill="url(#play-icon-gradient)" />
            <rect x="14" y="5" width="4" height="14" fill="url(#play-icon-gradient)" />
            <defs>
              <linearGradient id="play-icon-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
                <stop offset="0%" stop-color="#163F50" />
                <stop offset="50%" stop-color="#0D6783" />
                <stop offset="100%" stop-color="#C9E1FF" />
              </linearGradient>
            </defs>
          </svg>
        `;

        playIcon.style.opacity = 0.8; // Slight transparency during playback
      } else {
        video.pause();

        // Change to Play Icon
        playIcon.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none">
            <defs>
              <linearGradient id="play-icon-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
                <stop offset="0%" stop-color="#163F50" />
                <stop offset="50%" stop-color="#0D6783" />
                <stop offset="100%" stop-color="#C9E1FF" />
              </linearGradient>
            </defs>
            <path d="M8 5v14l11-7z" fill="url(#play-icon-gradient)" />
          </svg>
        `;

        playIcon.style.opacity = 1; // Fully visible when paused
      }
    };

    // Play/Pause functionality on play icon click
    playIcon.addEventListener("click", togglePlayPause);

    // Show play icon when video ends
    video.addEventListener("ended", () => {
      playIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none">
          <defs>
            <linearGradient id="play-icon-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
              <stop offset="0%" stop-color="#163F50" />
              <stop offset="50%" stop-color="#0D6783" />
              <stop offset="100%" stop-color="#C9E1FF" />
            </linearGradient>
          </defs>
          <path d="M8 5v14l11-7z" fill="url(#play-icon-gradient)" />
        </svg>
      `;
      playIcon.style.opacity = 1;
    });

    // Ensure play icon updates on video pause
    video.addEventListener("pause", () => {
      playIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none">
          <defs>
            <linearGradient id="play-icon-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
              <stop offset="0%" stop-color="#163F50" />
              <stop offset="50%" stop-color="#0D6783" />
              <stop offset="100%" stop-color="#C9E1FF" />
            </linearGradient>
          </defs>
          <path d="M8 5v14l11-7z" fill="url(#play-icon-gradient)" />
        </svg>
      `;
      playIcon.style.opacity = 1;
    });
  });

});
</script>
<style>
.video-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
}

.video-content {
  width: 100%;
  height: 100%;
}

.play-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 40px;
    background: rgba(242, 252, 255, 1); /* White background */
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: opacity 0.3s ease, transform 0.2s ease;
}

.play-icon:hover {
    opacity: 0.8; /* Slight fade effect */
    transform: translate(-50%, -50%) scale(1.1); /* Scale up on hover */
    cursor: pointer;
}

.play-icon svg {
    width: 20px; /* Size of the play icon */
    height: 20px;
}
.video-wrapper:hover .play-icon {
  opacity: 0.8;
}
</style>