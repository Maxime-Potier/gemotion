<%= form_with url: dedicace_de_fin_patch_path(@dedicace), method: :patch, multipart: true, local: true do |f| %>
  <div class="flex flex-col justify-start items-center">
    <h2 class='mb-[48px]'>Ajoutez votre partie vidéo à la dédicace finale</h2>
    <div class="film-yourself-block flex justify-center items-center mt-65">
      Filmez vous directement sur notre plateforme (via votre tablette, téléphone, ordinateur)
      <%= image_tag 'img_placeholder.png', class: 'top-image' %>
    </div>
    <div class="dedicace_de_fin_form_block mt-6 flex flex flex-col">
      <div class="flex justify-start items-center">
        <div class="mr-2">Vos médias</div>
        <div class="flex justify-start items-center">
          <%= image_tag 'icons/mingcute_time-line.png', alt: 'Time Icon', class: 'inline-block ml-2', style: 'height: 24px; width: 24px;' %>
          <div id="setVideoTime" class="ml-2">00:00</div>
        </div>
      </div>

      <div class="flex justify-start items-center mt-8">
        <div class="mr-2 font-bold">Thème:</div>
        <div class="flex justify-start items-center">
          <%=@dedicace.name%>
        </div>
      </div>
      <div class = "w-full flex justify-center items-center mt-8">
        <div class="video-recording-block flex justify-center items-center">
          <%if @dedicace.creator_end_dedication_video.attached?%>
            <%= video_tag @dedicace.creator_end_dedication_video, controls: true, autobuffer: true, style: "width: 100%; height:100%; border-radius:15px;", id: "videoUploaded" %>
         <%end%>
          <span id="videoPreviewText" style="<%=@dedicace.creator_end_dedication_video.attached? ? 'display: none;' : ''%>">La vue depuis la caméra frontale s'ouvre ici</span>
          <%= image_tag 'f7_person-alt.png', class: "#{@dedicace.creator_end_dedication_video.attached? ? 'd-none' : ''} video-recording-block-img", id: 'videoPreviewImg' %>
          <video id="videoPreview" controls style="display: none;width: 100%; height:100%; border-radius:15px;"></video>
        </div>

      </div>
        <div class="flex justify-center items-center mt-4">
          <button type="button" id="startRecording" class="cta-transparent w-370i">
            <%= image_tag "icons/fluent_record-24-regular.png", alt: "Download Icon", class: "inline-block", style: "height: 16px; width: 16px;" %>
            Commencer l'enregistrement vidéo
          </button>

          <button type="button" id="stopRecording" class="cta-transparent w-370i" style="display: none;">
            <%= image_tag "icons/fluent_record-24-regular.png", alt: "Download Icon", class: "inline-block", style: "height: 16px; width: 16px;" %>
            Arrêter l'enregistrement vidéo
          </button>
        </div>
        <input type="file" id="recordedVideoFile" name="dedicace[creator_end_dedication_video]" style="display: none;" />
      <%
=begin%>
 <div class="form-group">
        <h3>Choose Your Position in the Car</h3>
        <%= select_tag 'position', options_for_select(['Driver', 'Passenger', 'Back Seat Left', 'Back Seat Right']), prompt: 'Select your position', class: 'form-control', id: 'positionSelect' %>
      </div>
<%
=end%>

      <div class="upload-video-block flex flex-col justify-center items-center">
        <span>Faites glisser ou appuyez pour ajouter vos médias</span>
        <div class="upload-circle mt-2" id="customUploadButton">
          <span class="plus-sign">+</span>
        </div>
        <%= f.file_field "dedicace[creator_end_dedication_video_uploaded]", accept: 'video/*', class: 'form-control', style: 'display: none;', id: 'fileUploadInput' %>
      </div>




      <%
=begin%>
 <%= f.hidden_field :car_position, id: 'carPosition' %>
<%
=end%>

  </div>


  </div>
<div class="video-steps">
  <%= render "videos/shared/back_button" %>
  <div>
    <%= link_to "Continuer plus tard", skip_dedicace_de_fin_path, class: "cta-transparent" %>
    <%= f.submit "Étape suivante", class: "cta" %>
  </div>

</div>
<% end %>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const startButton = document.getElementById("startRecording");
  const stopButton = document.getElementById("stopRecording");
  const videoPreview = document.getElementById("videoPreview");
  const videoPreviewText = document.getElementById("videoPreviewText");
  const videoPreviewImg = document.getElementById("videoPreviewImg");
  const videoUploaded = document.getElementById("videoUploaded");
  const recordedVideoFile = document.getElementById("recordedVideoFile");

  const customUploadButton = document.getElementById("customUploadButton");
  const fileUploadInput = document.getElementById("fileUploadInput");

  customUploadButton.addEventListener("click", () => {
    fileUploadInput.click();
  });

  fileUploadInput.addEventListener("change", (event) => {
    const fileName = event.target.files[0]?.name;
    if (fileName) {
      customUploadButton.querySelector(".plus-sign").textContent = "✔";
    }
  });

  let mediaRecorder;
  let recordedChunks = [];

  startButton.addEventListener("click", async () => {
    recordedChunks = [];
    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    videoPreview.srcObject = stream;
    videoPreviewText.style.display = "none";
    videoPreviewImg.style.display = "none";
    videoUploaded.style.display = "none";
    videoPreview.style.display = "block";
    videoPreview.play();

    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        recordedChunks.push(event.data);
      }
    };
    mediaRecorder.onstop = () => {
      const recordedBlob = new Blob(recordedChunks, { type: "video/webm" });
      const file = new File([recordedBlob], "recorded_video.webm", { type: "video/webm" });
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      recordedVideoFile.files = dataTransfer.files;
      videoPreview.srcObject = null;
      stream.getTracks().forEach((track) => track.stop());
    };

    mediaRecorder.start();
    startButton.style.display = "none";
    stopButton.style.display = "block";
  });

  stopButton.addEventListener("click", () => {
    mediaRecorder.stop();
    stopButton.style.display = "none";
    startButton.style.display = "block";
  });
});
</script>