<h1 class="video-h1">Ici, vous pouvez éditer la vidéo</h1>
<div class="flex flex-row justify-center w-full">
  <%= image_tag 'left-no-star.png', class: 'image-sides left-image' %>
  <div class="content w-full flex flex-col justify-center items-center">

    <div class="w-full flex-col justify-center items-center">
      <%= form_with url: edit_video_post_path, method: :post, html: { class: "flex flex-col justify-center items-center w-full", id: "edit_video_form", data: { turbo: false } } do |f| %>
        <div class="edit-video-frame mt-6 flex flex-col justify-center items-center">
          <div class="w-full flex flex-col justify-start" >
            <div class="flex justify-start items-center">
              <div class="mr-2">Vos médias</div>
              <div class="flex justify-start items-center">
                <%= image_tag 'icons/mingcute_time-line.png', alt: 'Time Icon', class: 'inline-block ml-2 mr-2', style: 'height: 24px; width: 24px;' %>
                <%= format_time(@video.final_video_duration) %>
              </div>
              <div class="ml-50">Coût de votre film</div>
              <div class="flex justify-start items-center">
                <%= image_tag 'icons/ant-design_euro-outlined', alt: 'Time Icon', class: 'inline-block ml-2 mr-2', style: 'height: 24px; width: 24px;' %>
                <%duration_in_minutes = Video.calculate_duration(@video.final_video_duration) %>
                <%=Video.calculate_price(duration_in_minutes)%>
              </div>
            </div>
            <div class="flex justify-start items-center mt-8">
              <div class="mr-2 font-bold">Thème:</div>
              <div class="flex justify-start items-center">
                <%=@video.dedicace.name%>
              </div>
            </div>
          </div>
          <% if @video.completed? %>
            <div>
              <div class="w-full flex justify-center items-center">
                <video controls style="max-width: 100%; height: auto; border-radius: 20px;">
                  <source src="<%= url_for(@video.final_video_with_watermark) %>" type="video/mp4">
                  Votre navigateur ne prend pas en charge l'élément vidéo.
                </video>
              </div>
            </div>
          <% else%>
              <div class="flex relative items-center gap-[61px]">
                <%= video_tag asset_path('about.mp4'), id: 'about-video-element', controls: false, width: 982, height: 425, poster: asset_path('gemotion-about-video-poster.svg') %>
                <div id="play-button" class="absolute inset-0 flex items-center justify-center cursor-pointer">
                    <%= image_tag 'icons/about-video-play.svg', alt: 'Play Button' %>
                    <%= image_tag 'icons/video-bottom.png', alt: 'Play Button Icon', class: 'absolute video-bottom-bar-icon' %>
                </div>
              </div>
          <% end %>
          <div id="chapters-list" class="chapters-grid mt-8">
            <% @chapters.each do |chapter| %>
              <div class="project-main-block flex flex-col justify-between items-center chapter-item" data-id="<%= chapter.id %>">
                <div class="project-block">

                  <div class="delete-chap-icon-btn" data-url="<%= delete_video_chapter_path(chapter.id) %>" data-confirm="Are you sure you want to delete this chapter?">
                    <%= image_tag "icons/delete-icon.png", alt: "Delete Icon", class: "delete-chap-icon" %>
                  </div>
                  <div class="project-block-bottom-white">
                    <div class="text-left-important p-text-18"><%=chapter.chapter_type.name%></div>
                    <div class="p-text-16"><%=chapter.text%></div>
                  </div>
                  <div data-controller="dialog" data-action="click->dialog#clickOutside">
                    <%= image_tag "icons/tdesign_more_white.png", alt: "Edit Icon", class: "edit-video-icon", data: { action: "click->dialog#open" } %>
                    <dialog data-dialog-target="modal" class="backdrop:bg-slate-400 backdrop:opacity-80 w-full lg:w-2/3 edit-chap-modal">
                      <div class="w-full h-full flex flex-col justify-start items-center">
                        <div class="video-memory">
                          <div class="video-memory-thumb-wrapper">
                            <% if chapter.chapter_type.image.attached? %>
                                <%= image_tag chapter.chapter_type.image, class: "h-[150px] w-[200px] object-cover rounded" %>
                            <% else %>
                                <p>Pas d'image</p>
                            <% end %>
                          </div>
                          <div class="w-full">
                            <%= f.text_field "chapters[#{chapter.id}][text]", value: chapter.text , placeholder: "Quel texte doit contenir ce chapitre ...", class: "w-full br-10" %>
                          </div>
                          <div id="edit-video-gallery-<%= chapter.id %>" class="gallery flex flex-row items-center space-x-8">
                            <% chapter.ordered_videos.each do |video| %>
                              <div class="edit-video-container old-video-container" data-file-name="<%= video.filename.to_s %>">
                                <%= video_tag video, controls: true, autobuffer: true %>
                                <div class="purge-attachment-icon-btn" data-url="<%= purge_chapter_attachment_path(video.id) %>">
                                  <%= image_tag "icons/delete-icon.png", alt: "Delete Icon", class: "purge-chap-icon" %>
                                </div>
                              </div>
                            <% end %>
                          </div>
                          <%= f.hidden_field "chapters[#{chapter.id}][videos_order]", id: "videos_order_#{chapter.id}" %>

                          <div class="upload-attachment-block flex flex-col justify-center items-center">
                            <span class="text-center">Faites glisser ou appuyez pour ajouter vos vidéos</span>
                            <div class="upload-attachment-circle mt-2" id="customUploadButtonVideos">
                              <span class="plus-sign">+</span>
                            </div>
                            <%= f.file_field "chapters[#{chapter.id}][videos]", multiple: true, accept: 'video/*', class: 'form-control', style: 'display: none;', id: 'fileUploadInputVideos' %>
                          </div>

                          <div id="edit-photo-gallery-<%= chapter.id %>" class="gallery flex flex-row items-center space-x-8">
                            <% chapter.ordered_photos.each do |photo| %>
                              <div class="edit-image-container old-image-container" data-file-name="<%= photo.filename.to_s %>">
                                <%= image_tag photo.variant(resize_to_fill: [200, 200]).processed, class: "prev-image" %>
                                <div class="purge-attachment-icon-btn" data-url="<%= purge_chapter_attachment_path(photo.id) %>">
                                  <%= image_tag "icons/delete-icon.png", alt: "Delete Icon", class: "purge-chap-icon" %>
                                </div>
                              </div>
                            <% end %>
                          </div>
                          <%= f.hidden_field "chapters[#{chapter.id}][photos_order]", id: "images_order_#{chapter.id}" %>

                          <div class="upload-attachment-block flex flex-col justify-center items-center">
                            <span class="text-center">Faites glisser ou appuyez pour ajouter vos photos</span>
                            <div class="upload-attachment-circle mt-2" id="customUploadButtonPhotos">
                              <span class="plus-sign">+</span>
                            </div>
                            <%= f.file_field "chapters[#{chapter.id}][photos]", multiple: true, accept: 'image/*', class: 'form-control', style: 'display: none;', id: 'fileUploadInputPhotos' %>
                          </div>
                          <%if @video.by_chapters?%>
                            <div class="music-selection w-full">
                              <% selected_music_id = chapter.video_music&.music_id %>
                              <%= f.select "chapters[#{chapter.id}][music_id]", @musics.map { |music| [music[:name], music[:id]] }, { include_blank: 'Sélectionnez une musique', selected: selected_music_id }, { class: 'music-select w-full br-10' } %>
                            </div>
                          <%end%>
                          <%= button_tag type: 'button', formmethod: 'dialog', class: 'cta w-100i h-45', data: { action: 'click->dialog#close' } do %>
                            Fermer
                          <% end %>
                        </div>
                      </div>

                    </dialog>
                  </div>
                  <% if chapter.chapter_type.image.attached? %>
                    <%= image_tag chapter.chapter_type.image, class: "prev-image preview-prof-img" %>
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
          <input type="hidden" name="chapter_order" id="chapter_order" />
          <div class="edit-video-alert w-full">
            <%= image_tag "icons/alert.svg" %>
            <p class="p-text-16">Cliquez et faites glisser pour changer l'ordre</p>
          </div>
        </div>
          <div class="video-steps">
            <%= link_to "Ajouter un chapitre", go_to_select_chapters_path, class: "transparent-link mr-8", data: {turbo: false} %>
            <%= f.submit "Enregistrer et payer", class: "black-link" %>
          </div>
      <% end %>
    </div>
  </div>
  <%= image_tag 'right-with-bottom-star.png', class: 'image-sides right-image' %>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const customUploadButtonVideos = document.getElementById("customUploadButtonVideos");
  const customUploadButtonPhotos = document.getElementById("customUploadButtonPhotos");
  const fileUploadInputVideos = document.getElementById("fileUploadInputVideos");
  const fileUploadInputPhotos = document.getElementById("fileUploadInputPhotos");

  initializeSortableForAll();

  customUploadButtonVideos.addEventListener("click", () => {
    fileUploadInputVideos.click();
  });
  customUploadButtonPhotos.addEventListener("click", () => {
    fileUploadInputPhotos.click();
  });

  fileUploadInputVideos.addEventListener("change", (event) => {
    const chapterId = event.target.closest(".chapter-item").getAttribute("data-id");
    const videoGallery = document.getElementById(`edit-video-gallery-${chapterId}`);
    const videosOrderInput = document.getElementById(`videos_order_${chapterId}`);

    // Replace existing video containers with new uploaded files
    videoGallery.innerHTML = "";
    Array.from(event.target.files).forEach((file) => {
      addVideoContainer(videoGallery, file, event.target);
    });

    // Update order and reinitialize Sortable
    updateOrder(videoGallery, videosOrderInput);
    initializeSortableForGallery(videoGallery, videosOrderInput);
    const fileName = event.target.files[0]?.name;
    if (fileName) {

      customUploadButtonVideos.querySelector(".plus-sign").textContent = "✔";
    }
  });

  fileUploadInputPhotos.addEventListener("change", (event) => {
    const chapterId = event.target.closest(".chapter-item").getAttribute("data-id");
    const photoGallery = document.getElementById(`edit-photo-gallery-${chapterId}`);
    const photosOrderInput = document.getElementById(`images_order_${chapterId}`);

    // Replace existing photo containers with new uploaded files
    photoGallery.innerHTML = "";
    Array.from(event.target.files).forEach((file) => {
      addPhotoContainer(photoGallery, file, event.target);
    });

    // Update order and reinitialize Sortable
    updateOrder(photoGallery, photosOrderInput);
    initializeSortableForGallery(photoGallery, photosOrderInput);
    const fileName = event.target.files[0]?.name;
    if (fileName) {
      customUploadButtonPhotos.querySelector(".plus-sign").textContent = "✔";
    }
  });

  // Initialize Sortable for all galleries
  function initializeSortableForAll() {
    const chaptersList = document.getElementById("chapters-list");
    const chapterOrderInput = document.getElementById("chapter_order");

    if (chaptersList) {
      new Sortable(chaptersList, {
        animation: 150,
        onEnd: function () {
          // Update the order of chapter IDs
          const order = Array.from(chaptersList.children).map((item) =>
            item.getAttribute("data-id")
          );
          chapterOrderInput.value = order.join(",");
        },
      });
      Array.from(chaptersList.children).forEach((chapterItem) => {
        const chapterId = chapterItem.getAttribute("data-id");
        const videoGallery = document.getElementById(`edit-video-gallery-${chapterId}`);
        const photoGallery = document.getElementById(`edit-photo-gallery-${chapterId}`);
        const videosOrderInput = document.getElementById(`videos_order_${chapterId}`);
        const photosOrderInput = document.getElementById(`images_order_${chapterId}`);

        initializeSortableForGallery(videoGallery, videosOrderInput);
        initializeSortableForGallery(photoGallery, photosOrderInput);
      });
    }
  }


  // Helper function to initialize Sortable for a gallery
  function initializeSortableForGallery(gallery, orderInput) {
    if (gallery) {
      new Sortable(gallery, {
        animation: 150,
        onEnd: () => updateOrder(gallery, orderInput),
      });
    }
  }

  // Handle delete chapter button click
  document.addEventListener("click", (event) => {
    const deleteButton = event.target.closest(".delete-chap-icon-btn");
    if (deleteButton) {
      const url = deleteButton.dataset.url;
      const confirmation = deleteButton.dataset.confirm;

      if (confirm(confirmation)) {
        fetch(url, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.message) {
              window.location.reload();
            } else {
              alert("Failed to delete the chapter. Please try again.");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("An error occurred. Please try again.");
          });
      }
    }

    // Handle attachment purge button click (for photos and videos)
    const purgeButton = event.target.closest(".purge-attachment-icon-btn");
    const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
    if (purgeButton) {
      const url = purgeButton.dataset.url;
      const confirmation = "Are you sure you want to delete this attachment?";

      if (confirm(confirmation)) {
        fetch(url, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            "Accept": "application/json",
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.message) {
              // Remove the attachment container from the DOM
              purgeButton.closest(".edit-image-container, .edit-video-container").remove();
            } else {
              alert("Failed to delete the attachment. Please try again.");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("An error occurred. Please try again.");
          });
      }
    }
  });

    // Helper function to update order input
  function updateOrder(gallery, orderInput) {
    const order = Array.from(gallery.children).map((item) =>
      item.getAttribute("data-file-name")
    );
    orderInput.value = order.join(",");
  }

  function updateFileInput(inputElement, fileList) {
    const dataTransfer = new DataTransfer();
    console.log("updateFileInput")
    fileList.forEach((file) => {
      dataTransfer.items.add(file);
    });

    inputElement.files = dataTransfer.files;
  }

  let uploadedVideos = [];
  let uploadedPhotos = [];

  // Helper function to add video container
  function addVideoContainer(gallery, file, inputElement) {
    const fileName = file.name;
    uploadedVideos.push(file);

    const videoContainer = document.createElement("div");
    videoContainer.classList.add("edit-video-container", "new-video-container");
    videoContainer.setAttribute("data-file-name", fileName);

    const videoPreview = document.createElement("video");
    videoPreview.controls = true;
    videoPreview.src = URL.createObjectURL(file);

    const deleteButton = document.createElement("div");
    deleteButton.classList.add("purge-attachment-icon");
    deleteButton.innerHTML = `<img src="<%= asset_path('icons/delete-icon.png') %>" alt="Delete Icon" class="purge-chap-icon">`;
    deleteButton.addEventListener("click", () => {
      console.log("sdfsdfds")

      uploadedVideos = uploadedVideos.filter((item) => item.name !== fileName);
      updateFileInput(inputElement, uploadedVideos);

      updateOrder(gallery, gallery.closest(".chapter-item").querySelector(`[id^='videos_order_']`));
      videoContainer.remove();

    });

    videoContainer.appendChild(videoPreview);
    videoContainer.appendChild(deleteButton);
    gallery.appendChild(videoContainer);
  }

  // Helper function to add photo container
  function addPhotoContainer(gallery, file, inputElement) {
    const fileName = file.name;
    uploadedPhotos.push(file);

    const photoContainer = document.createElement("div");
    photoContainer.classList.add("edit-image-container", "new-image-container");
    photoContainer.setAttribute("data-file-name", fileName);

    const photoPreview = document.createElement("img");
    photoPreview.classList.add("prev-image");
    photoPreview.src = URL.createObjectURL(file);

    const deleteButton = document.createElement("div");
    deleteButton.classList.add("purge-attachment-icon");
    deleteButton.innerHTML = `<img src="<%= asset_path('icons/delete-icon.png') %>" alt="Delete Icon" class="purge-chap-icon">`;
    deleteButton.addEventListener("click", () => {
      photoContainer.remove();

      uploadedPhotos = uploadedPhotos.filter((item) => item.name !== fileName);
      updateFileInput(inputElement, uploadedPhotos);

      updateOrder(gallery, gallery.closest(".chapter-item").querySelector(`[id^='images_order_']`));
    });

    photoContainer.appendChild(photoPreview);
    photoContainer.appendChild(deleteButton);
    gallery.appendChild(photoContainer);
  }
});
</script>
