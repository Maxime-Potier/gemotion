<div class="introduction" id="video_intro" data-controller="switchvideo">
  <section class="hero">
    <h1 class="h1-video gradient-text">Ajoutez 3 photos du destinataire pour l'introduction de votre vidéo</h1>
  </section>
  <div class="flex flex-row justify-center w-full">
    <%= image_tag 'left-no-star.png', class: 'image-sides left-image' %>
    <div class="content w-full flex flex-col justify-center items-center">
      <div class="text-with-image-block-adjusted flex justify-center items-center mb-[72px] w-full p-text-16">
        Ajoutez 3 photos du destinataire pour l'introduction de votre vidéo.
        <%= image_tag 'icons/previews.png', class: 'image-from-image-text-block-occasion' %>
      </div>

      <%= form_with url: photo_intro_post_path, method: :post, html: { id: "previews-form", data: { turbo: false } } do |f| %>

        <div class="flex flex-col justify-center">
          <div class="flex-block-container flex flex-col justify-center items-start mb-[48px] relative inline-block w-full">
            <div class="w-full flex flex-col justify-center items-center">
              <h3 class="video-h3 mb-45">Regardez l'aperçu</h3>
              <p class="w-100 mb-[32px] p-text-center-16">
                L'introduction de votre vidéo dépendra de l'option que vous avez sélectionné
              </p>
            </div>
            <div class="w-full flex flex-col justify-center items-center">
              <div class="preview-big-image-block">
                <% if @ordered_previews.any? %>
                  <%= image_tag @ordered_previews.first.image, class: "big-preview-image", id: "big-preview-image" %>
                <% end %>
              </div>
            </div>
            <div class="w-full flex flex-col justify-center items-start mt-8">
              <div class="flex flex-row justify-start gap-[10px] this-should-be-sortable-container" id="sortable-container">
                <% @ordered_previews.each_with_index do |preview, index| %>
                  <div class="flex flex-col justify-center items-center w-full preview-small-image-block"
                      data-position="<%= index + 1 %>" data-filename="<%= preview.image.blob.filename.to_s %>">
                    <div class="delete-preview-icon-btn"
                        data-url="<%= drop_preview_path(preview, video_id: @video.id) %>">
                      <%= image_tag "icons/delete_icon.png", alt: "Delete Icon", class: "purge-chap-icon" %>
                    </div>
                    <%= image_tag preview.image, class: "preview-photo-intro-image" %>
                  </div>
                <% end %>
                <% (3 - @ordered_previews.size).times do |i| %>
                  <div class="flex flex-col justify-center items-center w-full preview-small-image-block"
                      data-position="<%= @ordered_previews.size + i + 1 %>">
                    <label for="file_<%= @ordered_previews.size + i + 1 %>" class="add-more-preview-circle flex justify-center items-center">
                      <span class="plus-sign-previews flex justify-center items-center">+</span>
                      <%= f.file_field "previews[#{@ordered_previews.size + i + 1}]", id: "file_#{@ordered_previews.size + i + 1 }", accept: "image/*",
                                        class: "image-input hidden", data: { position: @ordered_previews.size + i + 1 }%>
                    </label>
                    <img id="preview_<%= @ordered_previews.size + i + 1 %>" src="" alt="Preview Image" class="preview-photo-intro-image hidden" />
                    <div class="delete-preview-icon-btn hidden" data-url="">
                      <%= image_tag "icons/delete_icon.png", alt: "Delete Icon", class: "purge-chap-icon" %>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
            <div class="w-full flex flex-col justify-center items-start mt-2">
              <div class="flex flex-row justify-start gap-[10px]">
                <div class="flex items-center w-108 text-left">
                  1 position
                </div>
                <div class="flex items-center w-108 text-left">
                  2 position
                </div>
                <div class="flex items-center w-108 text-left">
                  Child Photo
                </div>
              </div>
            </div>
            <%= f.hidden_field :images_order, id: 'image_order', value: @ordered_previews.map { |preview| preview.image.blob.filename.to_s }.join(',') %>
          </div>
          <div class="edit-video-alert w-full">
            <%= image_tag "icons/alert.svg" %>
            <p class="p-text-16">Cliquez et faites glisser pour changer l'ordre</p>
          </div>
        </div>
        <div class="video-steps">
          <%= render "videos/shared/back_button" %>
          <%= f.submit "Étape suivante", class: "black-link" %>
        </div>
      <% end %>
    </div>
    <%= image_tag 'right-with-star.png', class: 'image-sides right-image' %>
  </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const sortableContainer = document.getElementById("sortable-container");
  const imageOrderInput = document.getElementById("image_order");
  const bigImageBlock = document.querySelector(".preview-big-image-block");

  // Initialize Sortable.js
  new Sortable(sortableContainer, {
    animation: 150,
    onEnd: () => updateOrder(),
  });

  // Update the hidden field with the order of filenames
  const updateOrder = () => {
    const order = Array.from(sortableContainer.children)
      .map((child) => child.dataset.filename)
      .filter(Boolean); // Only include blocks with filenames
    imageOrderInput.value = order.join(",");
  };

  // Display the selected image in the big preview block
  const displayInBigPreview = (src) => {
    bigImageBlock.innerHTML = ""; // Clear the big preview block
    const bigImage = document.createElement("img");
    bigImage.src = src;
    bigImage.className = "big-preview-image"; // Add a class for styling
    bigImageBlock.appendChild(bigImage);
  };

  // Add drag-and-drop functionality for each preview-small-image-block
  document.querySelectorAll(".preview-small-image-block").forEach((block) => {
    const position = block.dataset.position;
    const fileInput = block.querySelector(".image-input");

    // Highlight block on dragover
    block.addEventListener("dragover", (event) => {
      event.preventDefault();
      block.classList.add("drag-over");
    });

    // Remove highlight on dragleave
    block.addEventListener("dragleave", () => {
      block.classList.remove("drag-over");
    });

    // Handle file drop
    block.addEventListener("drop", (event) => {
      event.preventDefault();
      block.classList.remove("drag-over");

      const file = event.dataTransfer.files[0]; // Get the first dropped file
      if (file) {
        // Use DataTransfer API to assign the file to the input
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        fileInput.files = dataTransfer.files;

        const reader = new FileReader();
        reader.onload = (e) => {
          // Update only parts of the block visually, keeping the input intact
          block.querySelector(".preview-photo-intro-image").src = e.target.result;
          block.querySelector(".preview-photo-intro-image").classList.remove("hidden");
          block.querySelector(".add-more-preview-circle").classList.add("hidden");
          block.querySelector(".delete-preview-icon-btn").classList.remove("hidden");
          block.dataset.filename = file.name; // Save filename
          updateOrder(); // Update order with new filename
          displayInBigPreview(e.target.result); // Show the uploaded image in the big preview block
        };
        reader.readAsDataURL(file); // Read the dropped file
      }
    });
  });

  // Handle file uploads and previews via input click
  document.querySelectorAll(".image-input").forEach((input) => {
    input.addEventListener("change", (event) => {
      const position = event.target.dataset.position;
      const previewImg = document.getElementById(`preview_${position}`);
      const parentBlock = event.target.closest(".preview-small-image-block");

      if (event.target.files.length > 0) {
        const file = event.target.files[0];
        const reader = new FileReader();

        reader.onload = (e) => {
          // Set preview image source and update dataset with filename
          previewImg.src = e.target.result;
          previewImg.classList.remove("hidden");
          parentBlock.querySelector(".add-more-preview-circle").classList.add("hidden");
          const deleteButton = parentBlock.querySelector(".delete-preview-icon-btn");
          deleteButton.dataset.url = ""; // No server-side URL for newly uploaded files
          deleteButton.classList.remove("hidden");
          parentBlock.dataset.filename = file.name; // Save filename in dataset
          updateOrder(); // Update order with new filename

          // Show the uploaded image in the big preview block
          displayInBigPreview(e.target.result);
        };

        reader.readAsDataURL(file);
      }
    });
  });

  // Change the big preview image when clicking on any child of the sortable container
  sortableContainer.addEventListener("click", (event) => {
    const target = event.target.closest(".preview-small-image-block");
    if (target) {
      const previewImg = target.querySelector(".preview-photo-intro-image");
      if (previewImg && !previewImg.classList.contains("hidden")) {
        displayInBigPreview(previewImg.src);
      }
    }
  });


  // Handle image deletion for existing and new images
  document.addEventListener("click", (event) => {
    const deleteButton = event.target.closest(".delete-preview-icon-btn");
    if (deleteButton) {
      const parentBlock = deleteButton.closest(".preview-small-image-block");
      const fileName = parentBlock.dataset.filename;
      const position = parentBlock.dataset.position; // Retrieve position from the block
      const url = deleteButton.dataset.url;

      handleImageDeletion(url, parentBlock, position);
    }
  });

  const handleImageDeletion = async (url, parentBlock, position) => {
    try {
      if (url) {
        // Handle deletion for existing previews (server-side)
        const response = await fetch(url, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          console.error(`HTTP error! status: ${response.status}`);
          throw new Error("Server-side deletion failed.");
        }

        const data = await response.json();
        if (data.message) {
          resetPreviewBlock(parentBlock, position);
          updateOrder(); // Update the order after deletion
        } else {
          console.warn("Server did not confirm deletion.");
        }
      } else {
        // Handle deletion for newly uploaded images
        resetPreviewBlock(parentBlock, position);
        updateOrder();
      }
    } catch (error) {
      console.error("Error during image deletion:", error);
    } finally {
      // Reload the page after ensuring all operations are complete
      location.reload();
    }
  };

  const resetPreviewBlock = (block, position) => {
    block.dataset.filename = ""; // Reset the filename
    block.setAttribute("draggable", "false"); // Ensure the block is not draggable
    block.innerHTML = `
      <label for="file_${position}" class="add-more-preview-circle flex justify-center items-center">
        <span class="plus-sign-previews flex justify-center items-center">+</span>
        <input type="file" class="image-input hidden"
              id="file_${position}"
              accept="image/*"
              data-position="${position}"
              name="previews[${position}]">
      </label>
      <img id="preview_${position}" src="" alt="Preview Image" class="preview-photo-intro-image hidden">
      <div class="delete-preview-icon-btn hidden" data-url="">
        <img alt="Delete Icon" class="purge-chap-icon" src="<%= asset_path('icons/delete_icon.png') %>">
      </div>
    `;
  };






  // Ensure at least one image is uploaded before form submission
  document.getElementById("previews-form").addEventListener("submit", (event) => {
    const filledInputs = Array.from(document.querySelectorAll(".image-input")).filter((input) => input.files.length > 0);
    const existingPreviews = Array.from(sortableContainer.children).filter((child) => child.dataset.filename);

    if (filledInputs.length === 0 && existingPreviews.length === 0) {
      // Block submission if no new files are uploaded and no existing previews are present
      alert("Veuillez télécharger au moins une image.");
      event.preventDefault();
      return;
    }

    // Always update the order before proceeding
    updateOrder();
  });
});
</script>
