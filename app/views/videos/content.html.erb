<%
=begin%>
 <div>
  <h1 class="video-h1">Il est temps de remplir vos chapitres de merveilleux souvenirs !</h1>

  <p class="video-desc">Faites glisser ou ajouter vos photos et/ou vidéos dans les chapitres ci-dessous</p>

  <div class="frame">

    <div class="video-memories">
      <% @video_chapters.each do |video_chapter| %>
      <div class="video-memory">
          <%= form_with url: content_post_path(video_chapter), method: :post do |f| %>
            <div class="video-memory-thumb-wrapper">
              <% if video_chapter.chapter_type.image.attached? %>
                  <%= image_tag video_chapter.chapter_type.image, class: "h-[150px] w-[200px] object-cover rounded" %>
              <% else %>
                  <p>Pas d'image</p>
              <% end %>
              <span><%= video_chapter.chapter_type.name %></span>
            </div>

            <% if video_chapter.element.attached? %>
                <p>Vidéo actuelle</p>
                <%= video_tag video_chapter.element, controls: true, autobuffer: true%>
            <% end %>

            <%= f.file_field :element, class:"video-memory-file" %>

            <%= f.submit "Mettre en ligne", class:"video-memory-upload" %>
            <p class="video-memory-alert">*La vidéo ne devra pas excéder plus de 10 secondes</p>
          <% end %>
        </div>
      <% end %>
    </div>
  </div>

  <div class="video-steps">
    <%= render "videos/shared/back_button" %>
    <%= link_to "Étape suivante", skip_content_path, data: {turbo: false}, class:"cta" %>
  </div>

</div>
<%
=end%>



<div>
  <h1 class="video-h1">Ajoutez 2 vidéos et 2 photos pour chaque chapitre</h1>

  <div class="video-memories">
    <% @video_chapters.each do |video_chapter| %>
      <%= form_with url: content_post_path(video_chapter), method: :post, html: { class: "video-form", data: { turbo: false } } do |f| %>
        <div class="frame" id="drop-area-<%= video_chapter.id %>">
          <div class="drop-area">
            <p class='text-center'>Faites glisser et déposez les fichiers ici ou cliquez pour télécharger</p>
            <%= f.file_field :videos, multiple: true,
                            style: "display: none;",
                            id: "videoElem-#{video_chapter.id}",
                            accept: "video/*" %>
            <%= f.file_field :photos, multiple: true,
                            style: "display: none;",
                            id: "photoElem-#{video_chapter.id}",
                            accept: "image/*" %>
          </div>
        </div>
        <br>

        <div class='frame'>
          <div id="video-gallery-<%= video_chapter.id %>" class="gallery flex flex-row items-center space-x-8">
            <% video_chapter.videos.each_with_index do |video, index| %>
              <div class="video-container" data-id="<%= index %>">
                <%= video_tag video, controls: true, autobuffer: true %>
              </div>
            <% end %>
          </div>

          <div id="photo-gallery-<%= video_chapter.id %>" class="gallery flex flex-row items-center space-x-8">
            <% video_chapter.photos.each_with_index do |photo, index| %>
              <div class="image-container" data-id="<%= index %>">
                <%= image_tag photo.image, class: "preview-image prev-image" %>
              </div>
            <% end %>
          </div>
        </div>

        <div class="video-steps">
          <%= render "videos/shared/back_button" %>
          <%= f.submit "Mettre en ligne", class:"cta" %>
        </div>
      <% end %>
    <% end %>
  </div>
  <div class="video-steps">
    <%= render "videos/shared/back_button" %>
    <%= link_to "Étape suivante", skip_content_path, data: {turbo: false}, class:"cta" %>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const videoChapters = <%= raw @video_chapters.map(&:id).to_json %>;

  videoChapters.forEach(id => {
    const dropArea = document.getElementById(`drop-area-${id}`);
    const videoInput = document.getElementById(`videoElem-${id}`);
    const photoInput = document.getElementById(`photoElem-${id}`);
    const videoGallery = document.getElementById(`video-gallery-${id}`);
    const photoGallery = document.getElementById(`photo-gallery-${id}`);

    let videoDataTransfer = new DataTransfer();
    let photoDataTransfer = new DataTransfer();

    // Initialize Sortable.js for video and photo galleries
    new Sortable(videoGallery, { animation: 150 });
    new Sortable(photoGallery, { animation: 150 });

    dropArea.addEventListener("click", () => {
      videoInput.click();
      photoInput.click();
    });

    dropArea.addEventListener("dragover", (event) => {
      event.preventDefault();
      dropArea.classList.add("highlight");
    });

    dropArea.addEventListener("dragleave", () => dropArea.classList.remove("highlight"));

    dropArea.addEventListener("drop", (event) => {
      event.preventDefault();
      dropArea.classList.remove("highlight");
      handleFiles(event.dataTransfer.files);
    });

    function handleFiles(files) {
      for (const file of files) {
        if (file.type.startsWith("video/")) {
          if (videoDataTransfer.items.length >= 2) {
            alert("Vous pouvez seulement télécharger un maximum de 2 vidéos.");
            continue;
          }
          videoDataTransfer.items.add(file);
          addVideoToGallery(file, videoGallery);
        } else if (file.type.startsWith("image/")) {
          if (photoDataTransfer.items.length >= 2) {
            alert("Vous pouvez seulement télécharger un maximum de 2 photos.");
            continue;
          }
          photoDataTransfer.items.add(file);
          addPhotoToGallery(file, photoGallery);
        }
      }

      videoInput.files = videoDataTransfer.files;
      photoInput.files = photoDataTransfer.files;
    }

    function addVideoToGallery(file, gallery) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const videoContainer = document.createElement("div");
        videoContainer.classList.add("video-container");

        const video = document.createElement("video");
        video.src = e.target.result;
        video.controls = true;

        const removeBtn = document.createElement("button");
        removeBtn.innerText = "Remove";
        removeBtn.addEventListener("click", () => {
          videoContainer.remove();
          videoDataTransfer.items.remove(videoDataTransfer.items.length - 1);
          videoInput.files = videoDataTransfer.files;
        });

        videoContainer.appendChild(video);
        videoContainer.appendChild(removeBtn);
        gallery.appendChild(videoContainer);
      };
      reader.readAsDataURL(file);
    }

    function addPhotoToGallery(file, gallery) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imgContainer = document.createElement("div");
        imgContainer.classList.add("image-container");

        const img = document.createElement("img");
        img.src = e.target.result;
        img.classList.add("preview-image");

        const removeBtn = document.createElement("button");
        removeBtn.innerText = "Remove";
        removeBtn.addEventListener("click", () => {
          imgContainer.remove();
          photoDataTransfer.items.remove(photoDataTransfer.items.length - 1);
          photoInput.files = photoDataTransfer.files;
        });

        imgContainer.appendChild(img);
        imgContainer.appendChild(removeBtn);
        gallery.appendChild(imgContainer);
      };
      reader.readAsDataURL(file);
    }

    document.querySelector(`form`).addEventListener('submit', (event) => {
      if (videoDataTransfer.files.length === 0 && photoDataTransfer.files.length === 0) {
        alert("Veuillez sélectionner au moins une vidéo ou une image.");
        event.preventDefault();
      }
      videoInput.files = videoDataTransfer.files; // Sync files before submit
      photoInput.files = photoDataTransfer.files; // Sync files before submit
    });
  });
});
</script>
